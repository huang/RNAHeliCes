
// A dynamic programming evaluator generated by GAP-C.
// 
//   GAP-C version:
//     bellmansgapc-2012.05.07
// 
//   GAP-C call:
//     /home/jhuang/gapc/bin/gapc hishapes_lm_nolp.gap.cc -i hishapeb_mfe_pp -o hishapeb_mfe_pp.cc --kbacktrack --kbest --no-coopt-class --class-name hbmfepp 
// 
// 


#define GAPC_MOD_TRANSLATION_UNIT
#include "hishapeb_mfe_pp.hh"

uint32_t hbmfepp_insp_hash_h::k_ = 3;
#include <rtlib/subopt.hh>
#include "rna.hh"
#include "filter_add.hh"
//#include "mfe_filter.hh"
#include "mfe_answer.hh"
#include "mfe_answer_v4.hh"
#include "pf_answer.hh"
#include "hishape_filter.hh"

#include <rtlib/generic_opts.hh>

hbmfepp_hash_h &  hbmfepp::nt_closed(unsigned int t_0_i, unsigned int t_0_j)
{
  if (closed_table.is_tabulated(t_0_i, t_0_j))
    {
      return closed_table.get(t_0_i, t_0_j);
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);
  hbmfepp_hash_h ret_0 = nt_stack(t_0_i, t_0_j);
  append( answers, ret_0);
  std::pair<Rope, mfeanswer>  ret_1 = nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back( answers, ret_1);
    }

  hbmfepp_hash_h ret_2 = nt_leftB(t_0_i, t_0_j);
  append( answers, ret_2);
  hbmfepp_hash_h ret_3 = nt_rightB(t_0_i, t_0_j);
  append( answers, ret_3);
  hbmfepp_hash_h ret_4 = nt_iloop(t_0_i, t_0_j);
  append( answers, ret_4);
  hbmfepp_hash_h ret_5 = nt_multiloop(t_0_i, t_0_j);
  append( answers, ret_5);
  hash_filter( answers);
  finalize( answers);
  closed_table.set( t_0_i, t_0_j, answers);
  return closed_table.get(t_0_i, t_0_j);
}

hbmfepp_hash_h &  hbmfepp::nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return dangle_table.get(t_0_i, t_0_j);
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      hbmfepp_hash_h ret_2 = nt_initstem((t_0_i + 1), t_0_j);
      hbmfepp_hash_h a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (hbmfepp_hash_h::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<Rope, mfeanswer>  x_1 = *x_1_itr;
            std::pair<Rope, mfeanswer>  ans = edl(a_0, x_1);
            if (ans.second.energy <= _thresh)  // rule1
              {
                push_back( answers, ans);
              }

          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_3 = ret_5;
    if (is_not_empty(a_3))
    {
      hbmfepp_hash_h ret_4 = nt_initstem(t_0_i, (t_0_j - 1));
      hbmfepp_hash_h a_2 = ret_4;
      if (is_not_empty(a_2))
        {
          for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
            std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
            std::pair<Rope, mfeanswer>  ans = edr(x_2, a_3);
            if (ans.second.energy <= _thresh)  // rule1
              {
                push_back( answers, ans);
              }

          }
        }

      erase( a_2);
    }

    erase( a_3);
  }


  if (((t_0_j - t_0_i) >= 9))
  {
    TUSubsequence ret_9 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_6 = ret_9;
    if (is_not_empty(a_6))
    {
      TUSubsequence ret_7 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      TUSubsequence a_4 = ret_7;
      if (is_not_empty(a_4))
      {
        hbmfepp_hash_h ret_8 = nt_initstem((t_0_i + 1), (t_0_j - 1));
        hbmfepp_hash_h a_5 = ret_8;
        if (is_not_empty(a_5))
          {
            for (hbmfepp_hash_h::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
              std::pair<Rope, mfeanswer>  x_5 = *x_5_itr;
              std::pair<Rope, mfeanswer>  ans = edlr(a_4, x_5, a_6);
              if (ans.second.energy <= _thresh)  // rule1
                {
                  push_back( answers, ans);
                }

            }
          }

        erase( a_5);
      }

      erase( a_4);
    }

    erase( a_6);
  }


  if (((t_0_j - t_0_i) >= 7))
  {
    hbmfepp_hash_h ret_11 = nt_initstem(t_0_i, t_0_j);
    hbmfepp_hash_h a_7 = ret_11;
    if (is_not_empty(a_7))
      {
        for (hbmfepp_hash_h::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
          std::pair<Rope, mfeanswer>  x_7 = *x_7_itr;
          std::pair<Rope, mfeanswer>  ans = drem(x_7);
          if (ans.second.energy <= _thresh)  // rule1
            {
              push_back( answers, ans);
            }

        }
      }

    erase( a_7);
  }

  hash_filter( answers);
  finalize( answers);
  dangle_table.set( t_0_i, t_0_j, answers);
  return dangle_table.get(t_0_i, t_0_j);
}

std::pair<Rope, mfeanswer>  hbmfepp::nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return BRope_firstG_mfeanswer_secondG_E_zero;
    }

  std::pair<Rope, mfeanswer>  answers;
  empty( answers);
  std::pair<Rope, mfeanswer>  ret_0;
  if (((t_0_j - t_0_i) >= 7))
    {
      if (((!_exact) && pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_h, _theta)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_h)))  // added
      {                                                                                                                                                               // added
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_4 = ret_5;
        if (is_not_empty(a_4))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_3 = ret_4;
          if (is_not_empty(a_3))
          {
            TUSubsequence ret_3;
            if (minsize(t_0_seq, (t_0_i + 2), (t_0_j - 2), 3))
              {
                ret_3 = REGION(t_0_seq, (t_0_i + 2), (t_0_j - 2));
              }

            else
              {
                empty( ret_3);
              }

            TUSubsequence a_2 = ret_3;
            if (is_not_empty(a_2))
            {
              TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                  {
                    ret_0 = hl(a_0, a_1, a_2, a_3, a_4);
                  }

                else
                  {
                    empty( ret_0);
                  }

                erase( a_0);
              }

              else
                {
                  empty( ret_0);
                }

              erase( a_1);
            }

            else
              {
                empty( ret_0);
              }

            erase( a_2);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_3);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_4);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  return answers;
}

hbmfepp_hash_h hbmfepp::nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 13))
    {
      return LBRope_firstG_mfeanswer_secondG_EMhdecl0x127e6d0_zero;
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 13))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_i)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_b)))  // added
      {                                                                                                                                                                                                                          // added
        TUSubsequence ret_8 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_7 = ret_8;
        if (is_not_empty(a_7))
        {
          TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_6 = ret_7;
          if (is_not_empty(a_6))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                hbmfepp_hash_h ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 9))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 1); ((t_0_k_0 <= ((t_0_j - 2) - 8)) && (t_0_k_0 <= ((t_0_i + 2) + 30))); ++t_0_k_0)
                    {
                      for(                      unsigned int t_0_k_1 = ((((t_0_j - 2) - (t_0_k_0 + 7)) >= 30)) ? (((t_0_j - 2) - 30)) : ((t_0_k_0 + 7)); (t_0_k_1 <= ((t_0_j - 2) - 1)); ++t_0_k_1)
                      {
                        TUSubsequence ret_6;
                        if (maxsize(t_0_seq, t_0_k_1, (t_0_j - 2), 30))
                          {
                            ret_6 = REGION(t_0_seq, t_0_k_1, (t_0_j - 2));
                          }

                        else
                          {
                            empty( ret_6);
                          }

                        TUSubsequence a_5 = ret_6;
                        if (is_not_empty(a_5))
                        {
                          TUSubsequence ret_4;
                          if (maxsize(t_0_seq, (t_0_i + 2), t_0_k_0, 30))
                            {
                              ret_4 = REGION(t_0_seq, (t_0_i + 2), t_0_k_0);
                            }

                          else
                            {
                              empty( ret_4);
                            }

                          TUSubsequence a_3 = ret_4;
                          if (is_not_empty(a_3))
                          {
                            hbmfepp_hash_h ret_5 = nt_closed(t_0_k_0, t_0_k_1);
                            hbmfepp_hash_h a_4 = ret_5;
                            if (is_not_empty(a_4))
                              {
                                for (hbmfepp_hash_h::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                                  std::pair<Rope, mfeanswer>  x_4 = *x_4_itr;
                                  std::pair<Rope, mfeanswer>  ans = il(a_3, x_4, a_5);
                                  push_back( ret_3, ans);
                                }
                              }

                            erase( a_4);
                          }

                          erase( a_3);
                        }

                        erase( a_5);
                      }

                    }

                  }

                finalize( ret_3);
                hbmfepp_hash_h a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
                      std::pair<Rope, mfeanswer>  ans = sp(a_0, a_1, x_2, a_6, a_7);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_6);
        }

        erase( a_7);
      }

      else
        {
          empty( answers);
        }

    }

  hash_filter( answers);
  finalize( answers);
  return answers;
}

hbmfepp_hash_h hbmfepp::nt_initstem(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return LBRope_firstG_mfeanswer_secondG_EMhdecl0x127e6d0_zero;
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
  {
    hbmfepp_hash_h ret_1 = nt_closed(t_0_i, t_0_j);
    hbmfepp_hash_h a_0 = ret_1;
    if (is_not_empty(a_0))
      {
        for (hbmfepp_hash_h::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
          std::pair<Rope, mfeanswer>  x_0 = *x_0_itr;
          std::pair<Rope, mfeanswer>  ans = is(x_0);
          push_back( answers, ans);
        }
      }

    erase( a_0);
  }

  hash_filter( answers);
  finalize( answers);
  return answers;
}

hbmfepp_hash_h hbmfepp::nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return LBRope_firstG_mfeanswer_secondG_EMhdecl0x127e6d0_zero;
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_b)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_i)))  // added
      {                                                                                                                                                                                                                          // added
        TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_7;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_5 = ret_6;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                hbmfepp_hash_h ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 8))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 1); (t_0_k_0 <= ((t_0_j - 2) - 7)); ++t_0_k_0)
                    {
                      TUSubsequence ret_4 = REGION(t_0_seq, (t_0_i + 2), t_0_k_0);
                      TUSubsequence a_3 = ret_4;
                      if (is_not_empty(a_3))
                      {
                        hbmfepp_hash_h ret_5 = nt_closed(t_0_k_0, (t_0_j - 2));
                        hbmfepp_hash_h a_4 = ret_5;
                        if (is_not_empty(a_4))
                          {
                            for (hbmfepp_hash_h::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                              std::pair<Rope, mfeanswer>  x_4 = *x_4_itr;
                              std::pair<Rope, mfeanswer>  ans = bl(a_3, x_4);
                              push_back( ret_3, ans);
                            }
                          }

                        erase( a_4);
                      }

                      erase( a_3);
                    }

                  }

                finalize( ret_3);
                hbmfepp_hash_h a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
                      std::pair<Rope, mfeanswer>  ans = sp(a_0, a_1, x_2, a_5, a_6);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_5);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }

  hash_filter( answers);
  finalize( answers);
  return answers;
}

hbmfepp_hash_h &  hbmfepp::nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps_table.get(t_0_i, t_0_j);
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        hbmfepp_hash_h ret_3 = nt_ml_comps1(t_0_k_0, t_0_j);
        hbmfepp_hash_h a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          hbmfepp_hash_h ret_1;
          empty(ret_1);
          if (((t_0_k_0 - t_0_i) >= 7))
          {
            hbmfepp_hash_h ret_2 = nt_dangle(t_0_i, t_0_k_0);
            hbmfepp_hash_h a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (hbmfepp_hash_h::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<Rope, mfeanswer>  x_1 = *x_1_itr;
                  std::pair<Rope, mfeanswer>  ans = incl(x_1);
                  push_back( ret_1, ans);
                }
              }

            erase( a_1);
          }

          finalize( ret_1);
          hbmfepp_hash_h a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (hbmfepp_hash_h::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<Rope, mfeanswer>  x_0 = *x_0_itr;
                for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
                  std::pair<Rope, mfeanswer>  ans = cadd(x_0, x_2);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 15))
  {
    TUSubsequence ret_5 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_3 = ret_5;
    if (is_not_empty(a_3))
    {
      hbmfepp_hash_h ret_6 = nt_ml_comps((t_0_i + 1), t_0_j);
      hbmfepp_hash_h a_4 = ret_6;
      if (is_not_empty(a_4))
        {
          for (hbmfepp_hash_h::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
            std::pair<Rope, mfeanswer>  x_4 = *x_4_itr;
            std::pair<Rope, mfeanswer>  ans = sadd(a_3, x_4);
            push_back( answers, ans);
          }
        }

      erase( a_4);
    }

    erase( a_3);
  }

  hash_filter( answers);
  finalize( answers);
  ml_comps_table.set( t_0_i, t_0_j, answers);
  return ml_comps_table.get(t_0_i, t_0_j);
}

hbmfepp_hash_h &  hbmfepp::nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps1_table.get(t_0_i, t_0_j);
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        hbmfepp_hash_h ret_3 = nt_ml_comps1(t_0_k_0, t_0_j);
        hbmfepp_hash_h a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          hbmfepp_hash_h ret_1;
          empty(ret_1);
          if (((t_0_k_0 - t_0_i) >= 7))
          {
            hbmfepp_hash_h ret_2 = nt_dangle(t_0_i, t_0_k_0);
            hbmfepp_hash_h a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (hbmfepp_hash_h::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<Rope, mfeanswer>  x_1 = *x_1_itr;
                  std::pair<Rope, mfeanswer>  ans = incl(x_1);
                  push_back( ret_1, ans);
                }
              }

            erase( a_1);
          }

          finalize( ret_1);
          hbmfepp_hash_h a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (hbmfepp_hash_h::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<Rope, mfeanswer>  x_0 = *x_0_itr;
                for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
                  std::pair<Rope, mfeanswer>  ans = cadd(x_0, x_2);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_5 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_3 = ret_5;
    if (is_not_empty(a_3))
    {
      hbmfepp_hash_h ret_6 = nt_ml_comps1((t_0_i + 1), t_0_j);
      hbmfepp_hash_h a_4 = ret_6;
      if (is_not_empty(a_4))
        {
          for (hbmfepp_hash_h::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
            std::pair<Rope, mfeanswer>  x_4 = *x_4_itr;
            std::pair<Rope, mfeanswer>  ans = sadd(a_3, x_4);
            push_back( answers, ans);
          }
        }

      erase( a_4);
    }

    erase( a_3);
  }


  if (((t_0_j - t_0_i) >= 7))
  {
    hbmfepp_hash_h ret_8 = nt_dangle(t_0_i, t_0_j);
    hbmfepp_hash_h a_5 = ret_8;
    if (is_not_empty(a_5))
      {
        for (hbmfepp_hash_h::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
          std::pair<Rope, mfeanswer>  x_5 = *x_5_itr;
          std::pair<Rope, mfeanswer>  ans = incl(x_5);
          push_back( answers, ans);
        }
      }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 1)); ++t_0_k_1)
      {
        TUSubsequence ret_12 = REGION(t_0_seq, t_0_k_1, t_0_j);
        TUSubsequence a_8 = ret_12;
        if (is_not_empty(a_8))
        {
          hbmfepp_hash_h ret_10;
          empty(ret_10);
          if (((t_0_k_1 - t_0_i) >= 7))
          {
            hbmfepp_hash_h ret_11 = nt_dangle(t_0_i, t_0_k_1);
            hbmfepp_hash_h a_7 = ret_11;
            if (is_not_empty(a_7))
              {
                for (hbmfepp_hash_h::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                  std::pair<Rope, mfeanswer>  x_7 = *x_7_itr;
                  std::pair<Rope, mfeanswer>  ans = incl(x_7);
                  push_back( ret_10, ans);
                }
              }

            erase( a_7);
          }

          finalize( ret_10);
          hbmfepp_hash_h a_6 = ret_10;
          if (is_not_empty(a_6))
            {
              for (hbmfepp_hash_h::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                std::pair<Rope, mfeanswer>  x_6 = *x_6_itr;
                std::pair<Rope, mfeanswer>  ans = addss(x_6, a_8);
                push_back( answers, ans);
              }
            }

          erase( a_6);
        }

        erase( a_8);
      }

    }

  hash_filter( answers);
  finalize( answers);
  ml_comps1_table.set( t_0_i, t_0_j, answers);
  return ml_comps1_table.get(t_0_i, t_0_j);
}

hbmfepp_hash_h hbmfepp::nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 18))
    {
      return LBRope_firstG_mfeanswer_secondG_EMhdecl0x127e6d0_zero;
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 18))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_4 = ret_5;
        if (is_not_empty(a_4))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_3 = ret_4;
          if (is_not_empty(a_3))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                hbmfepp_hash_h ret_3 = nt_ml_comps((t_0_i + 2), (t_0_j - 2));
                hbmfepp_hash_h a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
                      std::pair<Rope, mfeanswer>  ans = ml(a_0, a_1, x_2, a_3, a_4);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_3);
        }

        erase( a_4);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 19))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_12 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_10 = ret_12;
        if (is_not_empty(a_10))
        {
          TUSubsequence ret_11 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_9 = ret_11;
          if (is_not_empty(a_9))
          {
            TUSubsequence ret_9 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
            TUSubsequence a_7 = ret_9;
            if (is_not_empty(a_7))
            {
              TUSubsequence ret_8 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_6 = ret_8;
              if (is_not_empty(a_6))
              {
                TUSubsequence ret_7 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_5 = ret_7;
                if (is_not_empty(a_5))
                {
                  hbmfepp_hash_h ret_10 = nt_ml_comps((t_0_i + 3), (t_0_j - 2));
                  hbmfepp_hash_h a_8 = ret_10;
                  if (is_not_empty(a_8))
                    {
                      for (hbmfepp_hash_h::iterator x_8_itr = a_8.ref().begin(); x_8_itr!=a_8.ref().end(); ++x_8_itr){
                        std::pair<Rope, mfeanswer>  x_8 = *x_8_itr;
                        std::pair<Rope, mfeanswer>  ans = mldl(a_5, a_6, a_7, x_8, a_9, a_10);
                        push_back( answers, ans);
                      }
                    }

                  erase( a_8);
                }

                erase( a_5);
              }

              erase( a_6);
            }

            erase( a_7);
          }

          erase( a_9);
        }

        erase( a_10);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 19))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_19 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_16 = ret_19;
        if (is_not_empty(a_16))
        {
          TUSubsequence ret_18 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_15 = ret_18;
          if (is_not_empty(a_15))
          {
            TUSubsequence ret_17 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
            TUSubsequence a_14 = ret_17;
            if (is_not_empty(a_14))
            {
              TUSubsequence ret_15 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_12 = ret_15;
              if (is_not_empty(a_12))
              {
                TUSubsequence ret_14 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_11 = ret_14;
                if (is_not_empty(a_11))
                {
                  hbmfepp_hash_h ret_16 = nt_ml_comps((t_0_i + 2), (t_0_j - 3));
                  hbmfepp_hash_h a_13 = ret_16;
                  if (is_not_empty(a_13))
                    {
                      for (hbmfepp_hash_h::iterator x_13_itr = a_13.ref().begin(); x_13_itr!=a_13.ref().end(); ++x_13_itr){
                        std::pair<Rope, mfeanswer>  x_13 = *x_13_itr;
                        std::pair<Rope, mfeanswer>  ans = mldr(a_11, a_12, x_13, a_14, a_15, a_16);
                        push_back( answers, ans);
                      }
                    }

                  erase( a_13);
                }

                erase( a_11);
              }

              erase( a_12);
            }

            erase( a_14);
          }

          erase( a_15);
        }

        erase( a_16);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 20))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_27 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_23 = ret_27;
        if (is_not_empty(a_23))
        {
          TUSubsequence ret_26 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_22 = ret_26;
          if (is_not_empty(a_22))
          {
            TUSubsequence ret_25 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
            TUSubsequence a_21 = ret_25;
            if (is_not_empty(a_21))
            {
              TUSubsequence ret_23 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
              TUSubsequence a_19 = ret_23;
              if (is_not_empty(a_19))
              {
                TUSubsequence ret_22 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
                TUSubsequence a_18 = ret_22;
                if (is_not_empty(a_18))
                {
                  TUSubsequence ret_21 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                  TUSubsequence a_17 = ret_21;
                  if (is_not_empty(a_17))
                  {
                    hbmfepp_hash_h ret_24 = nt_ml_comps((t_0_i + 3), (t_0_j - 3));
                    hbmfepp_hash_h a_20 = ret_24;
                    if (is_not_empty(a_20))
                      {
                        for (hbmfepp_hash_h::iterator x_20_itr = a_20.ref().begin(); x_20_itr!=a_20.ref().end(); ++x_20_itr){
                          std::pair<Rope, mfeanswer>  x_20 = *x_20_itr;
                          std::pair<Rope, mfeanswer>  ans = mldlr(a_17, a_18, a_19, x_20, a_21, a_22, a_23);
                          push_back( answers, ans);
                        }
                      }

                    erase( a_20);
                  }

                  erase( a_17);
                }

                erase( a_18);
              }

              erase( a_19);
            }

            erase( a_21);
          }

          erase( a_22);
        }

        erase( a_23);
      }

      else
        {
          empty( answers);
        }

    }

  hash_filter( answers);
  finalize( answers);
  return answers;
}

hbmfepp_hash_h hbmfepp::nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return LBRope_firstG_mfeanswer_secondG_EMhdecl0x127e6d0_zero;
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_b)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_i)))  // added
      {                                                                                                                                                                                                                          // added
        TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_7;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_5 = ret_6;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                hbmfepp_hash_h ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 8))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 7); (t_0_k_0 <= ((t_0_j - 2) - 1)); ++t_0_k_0)
                    {
                      TUSubsequence ret_5 = REGION(t_0_seq, t_0_k_0, (t_0_j - 2));
                      TUSubsequence a_4 = ret_5;
                      if (is_not_empty(a_4))
                      {
                        hbmfepp_hash_h ret_4 = nt_closed((t_0_i + 2), t_0_k_0);
                        hbmfepp_hash_h a_3 = ret_4;
                        if (is_not_empty(a_3))
                          {
                            for (hbmfepp_hash_h::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                              std::pair<Rope, mfeanswer>  x_3 = *x_3_itr;
                              std::pair<Rope, mfeanswer>  ans = br(x_3, a_4);
                              push_back( ret_3, ans);
                            }
                          }

                        erase( a_3);
                      }

                      erase( a_4);
                    }

                  }

                finalize( ret_3);
                hbmfepp_hash_h a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (hbmfepp_hash_h::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<Rope, mfeanswer>  x_2 = *x_2_itr;
                      std::pair<Rope, mfeanswer>  ans = sp(a_0, a_1, x_2, a_5, a_6);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_5);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }

  hash_filter( answers);
  finalize( answers);
  return answers;
}

hbmfepp_hash_h hbmfepp::nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 9))
    {
      return LBRope_firstG_mfeanswer_secondG_EMhdecl0x127e6d0_zero;
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            hbmfepp_hash_h ret_2 = nt_closed((t_0_i + 1), (t_0_j - 1));
            hbmfepp_hash_h a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (hbmfepp_hash_h::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<Rope, mfeanswer>  x_1 = *x_1_itr;
                  std::pair<Rope, mfeanswer>  ans = sr(a_0, x_1, a_2);
                  push_back( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  hash_filter( answers);
  finalize( answers);
  return answers;
}

hbmfepp_hash_h &  hbmfepp::nt_struct(unsigned int t_0_i)
{
  if (struct_table.is_tabulated(t_0_i))
    {
      return struct_table.get(t_0_i);
    }

  hbmfepp_hash_h answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        hbmfepp_hash_h ret_2 = nt_struct(t_0_k_0);
        hbmfepp_hash_h a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          hbmfepp_hash_h ret_1 = nt_dangle(t_0_i, t_0_k_0);
          hbmfepp_hash_h a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (hbmfepp_hash_h::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<Rope, mfeanswer>  x_0 = *x_0_itr;
                for (hbmfepp_hash_h::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<Rope, mfeanswer>  x_1 = *x_1_itr;
                  std::pair<Rope, mfeanswer>  ans = cadd(x_0, x_1);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_4 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_2 = ret_4;
    if (is_not_empty(a_2))
    {
      hbmfepp_hash_h ret_5 = nt_struct((t_0_i + 1));
      hbmfepp_hash_h a_3 = ret_5;
      if (is_not_empty(a_3))
        {
          for (hbmfepp_hash_h::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
            std::pair<Rope, mfeanswer>  x_3 = *x_3_itr;
            std::pair<Rope, mfeanswer>  ans = sadd(a_2, x_3);
            push_back( answers, ans);
          }
        }

      erase( a_3);
    }

    erase( a_2);
  }

  std::pair<Rope, mfeanswer>  ret_6;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_7 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_4 = ret_7;
    if (is_not_empty(a_4))
      {
        ret_6 = nil(a_4);
      }

    else
      {
        empty( ret_6);
      }

    erase( a_4);
  }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back( answers, ret_6);
    }

  hash_filter( answers);
  finalize( answers);
  struct_table.set( t_0_i, answers);
  return struct_table.get(t_0_i);
}


std::pair<Rope, mfeanswer>  hbmfepp::addss(const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb)
{
  Rope l_0 = p_e.first;
  TUSubsequence l_1 = p_rb;
  mfeanswer r_0 = p_e.second;
  TUSubsequence r_1 = p_rb;
  Rope ret_left = addss_l(l_0, l_1);
  mfeanswer ret_right = addss_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::bl(const TUSubsequence & p_lregion, const std::pair<Rope, mfeanswer> & p_e)
{
  TUSubsequence l_0 = p_lregion;
  Rope l_1 = p_e.first;
  TUSubsequence r_0 = p_lregion;
  mfeanswer r_1 = p_e.second;
  Rope ret_left = bl_l(l_0, l_1);
  mfeanswer ret_right = bl_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::br(const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rregion)
{
  Rope l_0 = p_e.first;
  TUSubsequence l_1 = p_rregion;
  mfeanswer r_0 = p_e.second;
  TUSubsequence r_1 = p_rregion;
  Rope ret_left = br_l(l_0, l_1);
  mfeanswer ret_right = br_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::cadd(const std::pair<Rope, mfeanswer> & p_le, const std::pair<Rope, mfeanswer> & p_re)
{
  Rope l_0 = p_le.first;
  Rope l_1 = p_re.first;
  mfeanswer r_0 = p_le.second;
  mfeanswer r_1 = p_re.second;
  Rope ret_left = cadd_l(l_0, l_1);
  mfeanswer ret_right = cadd_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::drem(const std::pair<Rope, mfeanswer> & p_e)
{
  Rope l_0 = p_e.first;
  mfeanswer r_0 = p_e.second;
  Rope ret_left = drem_l(l_0);
  mfeanswer ret_right = drem_r(r_0);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::edl(const TUSubsequence & p_lb, const std::pair<Rope, mfeanswer> & p_e)
{
  TUSubsequence l_0 = p_lb;
  Rope l_1 = p_e.first;
  TUSubsequence r_0 = p_lb;
  mfeanswer r_1 = p_e.second;
  Rope ret_left = edl_l(l_0, l_1);
  mfeanswer ret_right = edl_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::edlr(const TUSubsequence & p_lb, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  Rope l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfeanswer r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  Rope ret_left = edlr_l(l_0, l_1, l_2);
  mfeanswer ret_right = edlr_r(r_0, r_1, r_2);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::edr(const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb)
{
  Rope l_0 = p_e.first;
  TUSubsequence l_1 = p_rb;
  mfeanswer r_0 = p_e.second;
  TUSubsequence r_1 = p_rb;
  Rope ret_left = edr_l(l_0, l_1);
  mfeanswer ret_right = edr_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

template <typename Iterator>
hbmfepp_hash_h hbmfepp::h(std::pair<Iterator, Iterator> i)

{
  hbmfepp_hash_h answers;
  empty(answers);
  append_filter( answers, i);
  finalize( answers);
  return answers;
}

std::pair<Rope, mfeanswer>  hbmfepp::hl(const TUSubsequence & p_llb, const TUSubsequence & p_lb, const TUSubsequence & p_region, const TUSubsequence & p_rb, const TUSubsequence & p_rrb)
{
  TUSubsequence l_0 = p_llb;
  TUSubsequence l_1 = p_lb;
  TUSubsequence l_2 = p_region;
  TUSubsequence l_3 = p_rb;
  TUSubsequence l_4 = p_rrb;
  TUSubsequence r_0 = p_llb;
  TUSubsequence r_1 = p_lb;
  TUSubsequence r_2 = p_region;
  TUSubsequence r_3 = p_rb;
  TUSubsequence r_4 = p_rrb;
  Rope ret_left = hl_l(l_0, l_1, l_2, l_3, l_4);
  mfeanswer ret_right = hl_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::il(const TUSubsequence & p_lregion, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rregion)
{
  TUSubsequence l_0 = p_lregion;
  Rope l_1 = p_e.first;
  TUSubsequence l_2 = p_rregion;
  TUSubsequence r_0 = p_lregion;
  mfeanswer r_1 = p_e.second;
  TUSubsequence r_2 = p_rregion;
  Rope ret_left = il_l(l_0, l_1, l_2);
  mfeanswer ret_right = il_r(r_0, r_1, r_2);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::incl(const std::pair<Rope, mfeanswer> & p_e)
{
  Rope l_0 = p_e.first;
  mfeanswer r_0 = p_e.second;
  Rope ret_left = incl_l(l_0);
  mfeanswer ret_right = incl_r(r_0);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::is(const std::pair<Rope, mfeanswer> & p_e)
{
  Rope l_0 = p_e.first;
  mfeanswer r_0 = p_e.second;
  Rope ret_left = is_l(l_0);
  mfeanswer ret_right = is_r(r_0);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::ml(const TUSubsequence & p_llb, const TUSubsequence & p_lb, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb, const TUSubsequence & p_rrb)
{
  TUSubsequence l_0 = p_llb;
  TUSubsequence l_1 = p_lb;
  Rope l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence l_4 = p_rrb;
  TUSubsequence r_0 = p_llb;
  TUSubsequence r_1 = p_lb;
  mfeanswer r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  TUSubsequence r_4 = p_rrb;
  Rope ret_left = ml_l(l_0, l_1, l_2, l_3, l_4);
  mfeanswer ret_right = ml_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::mldl(const TUSubsequence & p_llb, const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb, const TUSubsequence & p_rrb)
{
  TUSubsequence l_0 = p_llb;
  TUSubsequence l_1 = p_lb;
  TUSubsequence l_2 = p_dl;
  Rope l_3 = p_e.first;
  TUSubsequence l_4 = p_rb;
  TUSubsequence l_5 = p_rrb;
  TUSubsequence r_0 = p_llb;
  TUSubsequence r_1 = p_lb;
  TUSubsequence r_2 = p_dl;
  mfeanswer r_3 = p_e.second;
  TUSubsequence r_4 = p_rb;
  TUSubsequence r_5 = p_rrb;
  Rope ret_left = mldl_l(l_0, l_1, l_2, l_3, l_4, l_5);
  mfeanswer ret_right = mldl_r(r_0, r_1, r_2, r_3, r_4, r_5);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::mldlr(const TUSubsequence & p_llb, const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb, const TUSubsequence & p_rrb)
{
  TUSubsequence l_0 = p_llb;
  TUSubsequence l_1 = p_lb;
  TUSubsequence l_2 = p_dl;
  Rope l_3 = p_e.first;
  TUSubsequence l_4 = p_dr;
  TUSubsequence l_5 = p_rb;
  TUSubsequence l_6 = p_rrb;
  TUSubsequence r_0 = p_llb;
  TUSubsequence r_1 = p_lb;
  TUSubsequence r_2 = p_dl;
  mfeanswer r_3 = p_e.second;
  TUSubsequence r_4 = p_dr;
  TUSubsequence r_5 = p_rb;
  TUSubsequence r_6 = p_rrb;
  Rope ret_left = mldlr_l(l_0, l_1, l_2, l_3, l_4, l_5, l_6);
  mfeanswer ret_right = mldlr_r(r_0, r_1, r_2, r_3, r_4, r_5, r_6);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::mldr(const TUSubsequence & p_llb, const TUSubsequence & p_lb, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb, const TUSubsequence & p_rrb)
{
  TUSubsequence l_0 = p_llb;
  TUSubsequence l_1 = p_lb;
  Rope l_2 = p_e.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence l_5 = p_rrb;
  TUSubsequence r_0 = p_llb;
  TUSubsequence r_1 = p_lb;
  mfeanswer r_2 = p_e.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  TUSubsequence r_5 = p_rrb;
  Rope ret_left = mldr_l(l_0, l_1, l_2, l_3, l_4, l_5);
  mfeanswer ret_right = mldr_r(r_0, r_1, r_2, r_3, r_4, r_5);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::nil(const TUSubsequence & p_loc)
{
  TUSubsequence l_0 = p_loc;
  TUSubsequence r_0 = p_loc;
  Rope ret_left = nil_l(l_0);
  mfeanswer ret_right = nil_r(r_0);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::sadd(const TUSubsequence & p_b, const std::pair<Rope, mfeanswer> & p_e)
{
  TUSubsequence l_0 = p_b;
  Rope l_1 = p_e.first;
  TUSubsequence r_0 = p_b;
  mfeanswer r_1 = p_e.second;
  Rope ret_left = sadd_l(l_0, l_1);
  mfeanswer ret_right = sadd_r(r_0, r_1);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::sp(const TUSubsequence & p_llb, const TUSubsequence & p_lb, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb, const TUSubsequence & p_rrb)
{
  TUSubsequence l_0 = p_llb;
  TUSubsequence l_1 = p_lb;
  Rope l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence l_4 = p_rrb;
  TUSubsequence r_0 = p_llb;
  TUSubsequence r_1 = p_lb;
  mfeanswer r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  TUSubsequence r_4 = p_rrb;
  Rope ret_left = sp_l(l_0, l_1, l_2, l_3, l_4);
  mfeanswer ret_right = sp_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<Rope, mfeanswer>  hbmfepp::sr(const TUSubsequence & p_lb, const std::pair<Rope, mfeanswer> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  Rope l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfeanswer r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  Rope ret_left = sr_l(l_0, l_1, l_2);
  mfeanswer ret_right = sr_r(r_0, r_1, r_2);
  std::pair<Rope, mfeanswer>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}



Rope hbmfepp::addss_l(const Rope & e, const TUSubsequence & rb)
{
#line 3087 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1641 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::bl_l(const TUSubsequence & lregion, const Rope & e)
{
#line 3329 "hishapes_lm_nolp.gap.cc"
  Rope res;
  append( res, "b,", 2);
  append( res, e);
  return res;
#line 1651 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::br_l(const Rope & e, const TUSubsequence & rregion)
{
#line 3336 "hishapes_lm_nolp.gap.cc"
  Rope res;
  append( res, "b,", 2);
  append( res, e);
  return res;
#line 1661 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::cadd_l(const Rope & le, const Rope & re)
{
#line 2944 "hishapes_lm_nolp.gap.cc"
  if ((re == "_"))
    {
      return le;
    }

  else
    {
      return (le + re);
    }

#line 1677 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::drem_l(const Rope & e)
{
#line 3010 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1684 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::edl_l(const TUSubsequence & lb, const Rope & e)
{
#line 2998 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1691 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::edlr_l(const TUSubsequence & lb, const Rope & e, const TUSubsequence & rb)
{
#line 3006 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1698 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::edr_l(const Rope & e, const TUSubsequence & rb)
{
#line 3002 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1705 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::hl_l(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb, const TUSubsequence & rrb)
{
  Rope res;
  int pos;
  pos = ( ( ((llb.i + rrb.j) + 1) )  / 2);
  if (((pos * 2) > ((llb.i + rrb.j) + 1)))
    {
      pos = (pos - 1);
    }

  append( res, pos);
  if (((pos * 2) != ((llb.i + rrb.j) + 1)))
    {
      append( res, ".5", 2);
    }

  append( res, ',');
  return res;
}

Rope hbmfepp::il_l(const TUSubsequence & lregion, const Rope & e, const TUSubsequence & rregion)
{
#line 3343 "hishapes_lm_nolp.gap.cc"
  Rope res;
  append( res, "i,", 2);
  append( res, e);
  return res;
#line 1735 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::incl_l(const Rope & e)
{
#line 3099 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1742 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::is_l(const Rope & e)
{
#line 3014 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1749 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::ml_l(const TUSubsequence & llb, const TUSubsequence & lb, const Rope & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
  Rope res;
  int pos;
  pos = ( ( ((llb.i + rrb.j) + 1) )  / 2);
  if (((pos * 2) > ((llb.i + rrb.j) + 1)))
    {
      pos = (pos - 1);
    }

  append( res, pos);
  if (((pos * 2) != ((llb.i + rrb.j) + 1)))
    {
      append( res, ".5", 2);
    }

  append( res, "m,(,", 4);
  append( res, e);
  append( res, "),", 2);
  return res;
}

Rope hbmfepp::mldl_l(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const Rope & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
  Rope res;
  int pos;
  pos = ( ( ((llb.i + rrb.j) + 1) )  / 2);
  if (((pos * 2) > ((llb.i + rrb.j) + 1)))
    {
      pos = (pos - 1);
    }

  append( res, pos);
  if (((pos * 2) != ((llb.i + rrb.j) + 1)))
    {
      append( res, ".5", 2);
    }

  append( res, "m,(,", 4);
  append( res, e);
  append( res, "),", 2);
  return res;
}

Rope hbmfepp::mldlr_l(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const Rope & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
  Rope res;
  int pos;
  pos = ( ( ((llb.i + rrb.j) + 1) )  / 2);
  if (((pos * 2) > ((llb.i + rrb.j) + 1)))
    {
      pos = (pos - 1);
    }

  append( res, pos);
  if (((pos * 2) != ((llb.i + rrb.j) + 1)))
    {
      append( res, ".5", 2);
    }

  append( res, "m,(,", 4);
  append( res, e);
  append( res, "),", 2);
  return res;
}

Rope hbmfepp::mldr_l(const TUSubsequence & llb, const TUSubsequence & lb, const Rope & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
  Rope res;
  int pos;
  pos = ( ( ((llb.i + rrb.j) + 1) )  / 2);
  if (((pos * 2) > ((llb.i + rrb.j) + 1)))
    {
      pos = (pos - 1);
    }

  append( res, pos);
  if (((pos * 2) != ((llb.i + rrb.j) + 1)))
    {
      append( res, ".5", 2);
    }

  append( res, "m,(,", 4);
  append( res, e);
  append( res, "),", 2);
  return res;
}

Rope hbmfepp::nil_l(const TUSubsequence & loc)
{
  Rope r;
  return r;
}

Rope hbmfepp::sadd_l(const TUSubsequence & b, const Rope & e)
{
  Rope emptyShape;
  Rope res;
  if ((e == emptyShape))
  {
    append( res, '_');
    append( res, e);
    return res;
  }

  else
    {
      return e;
    }

}

Rope hbmfepp::sp_l(const TUSubsequence & llb, const TUSubsequence & lb, const Rope & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 3318 "hishapes_lm_nolp.gap.cc"
  Rope res;
  int pos;
  pos = ( ( ((llb.i + rrb.j) + 1) )  / 2);
  if (((pos * 2) > ((llb.i + rrb.j) + 1)))
    {
      pos = (pos - 1);
    }

  append( res, pos);
  if (((pos * 2) != ((llb.i + rrb.j) + 1)))
    {
      append( res, ".5", 2);
    }

  append( res, e);
  return res;
#line 1883 "hishapeb_mfe_pp.cc"
}

Rope hbmfepp::sr_l(const TUSubsequence & lb, const Rope & e, const TUSubsequence & rb)
{
#line 3018 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1890 "hishapeb_mfe_pp.cc"
}



mfeanswer hbmfepp::addss_r(const mfeanswer & e, const TUSubsequence & rb)
{
#line 2327 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (e.energy + ss_energy(rb));
  res.firstStem = e.firstStem;
  res.lastStem = e.lastStem;
  return res;
#line 1903 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::bl_r(const TUSubsequence & lregion, const mfeanswer & e)
{
#line 2152 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = lregion.seq;
  res.firstStem.i = lregion.i;
  res.firstStem.j = e.firstStem.j;
  TUSubsequence innerstem;
  innerstem.seq = lregion.seq;
  innerstem.i = (lregion.i - 1);
  innerstem.j = (e.firstStem.j + 1);
  res.energy = (e.energy + bl_energy(lregion, innerstem));
  return res;
#line 1919 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::br_r(const mfeanswer & e, const TUSubsequence & rregion)
{
#line 2167 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = rregion.seq;
  res.firstStem.i = e.firstStem.i;
  res.firstStem.j = rregion.j;
  TUSubsequence innerstem;
  innerstem.seq = rregion.seq;
  innerstem.i = (e.firstStem.i - 1);
  innerstem.j = (rregion.j + 1);
  res.energy = (e.energy + br_energy(innerstem, rregion));
  return res;
#line 1935 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::cadd_r(const mfeanswer & le, const mfeanswer & re)
{
#line 2028 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (le.energy + re.energy);
  res.firstStem = le.firstStem;
  return res;
#line 1945 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::drem_r(const mfeanswer & e)
{
#line 2105 "hishapes_lm_nolp.gap.cc"
  return e;
#line 1952 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::edl_r(const TUSubsequence & lb, const mfeanswer & e)
{
#line 2084 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (e.energy + dl_energy(e.firstStem, e.firstStem));
  res.firstStem = e.firstStem;
  return res;
#line 1962 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::edlr_r(const TUSubsequence & lb, const mfeanswer & e, const TUSubsequence & rb)
{
#line 2098 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (e.energy + ext_mismatch_energy(e.firstStem, e.firstStem));
  res.firstStem = e.firstStem;
  return res;
#line 1972 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::edr_r(const mfeanswer & e, const TUSubsequence & rb)
{
#line 2091 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (e.energy + dr_energy(e.firstStem, e.firstStem));
  res.firstStem = e.firstStem;
  return res;
#line 1982 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::hl_r(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 2127 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = llb.seq;
  res.firstStem.i = llb.i;
  res.firstStem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.energy = (hl_energy(region) + sr_energy(res.firstStem, res.firstStem));
  return res;
#line 1998 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::il_r(const TUSubsequence & lregion, const mfeanswer & e, const TUSubsequence & rregion)
{
#line 2182 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = lregion.seq;
  res.firstStem.i = lregion.i;
  res.firstStem.j = rregion.j;
  res.energy = (e.energy + il_energy(lregion, rregion));
  return res;
#line 2010 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::incl_r(const mfeanswer & e)
{
#line 2349 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (ul_energy() + e.energy);
  res.firstStem = e.firstStem;
  res.lastStem = e.firstStem;
  return res;
#line 2021 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::is_r(const mfeanswer & e)
{
#line 2109 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = (e.energy + termau_energy(e.firstStem, e.firstStem));
  res.firstStem = e.firstStem;
  return res;
#line 2031 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::ml_r(const TUSubsequence & llb, const TUSubsequence & lb, const mfeanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 2192 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = llb.seq;
  res.firstStem.i = llb.i;
  res.firstStem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.energy = ((((ml_energy() + ul_energy()) + e.energy) + sr_energy(res.firstStem, res.firstStem)) + termau_energy(innerstem, innerstem));
  return res;
#line 2047 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::mldl_r(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const mfeanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 2297 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = llb.seq;
  res.firstStem.i = llb.i;
  res.firstStem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.energy = (((((ml_energy() + ul_energy()) + e.energy) + dli_energy(innerstem, innerstem)) + sr_energy(res.firstStem, res.firstStem)) + termau_energy(innerstem, innerstem));
  return res;
#line 2063 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::mldlr_r(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const mfeanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 2237 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = llb.seq;
  res.firstStem.i = llb.i;
  res.firstStem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.energy = (((((ml_energy() + ul_energy()) + e.energy) + ml_mismatch_energy(innerstem, innerstem)) + sr_energy(res.firstStem, res.firstStem)) + termau_energy(innerstem, innerstem));
  return res;
#line 2079 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::mldr_r(const TUSubsequence & llb, const TUSubsequence & lb, const mfeanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 2207 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = llb.seq;
  res.firstStem.i = llb.i;
  res.firstStem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.energy = (((((ml_energy() + ul_energy()) + e.energy) + dri_energy(innerstem, innerstem)) + sr_energy(res.firstStem, res.firstStem)) + termau_energy(innerstem, innerstem));
  return res;
#line 2095 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::nil_r(const TUSubsequence & loc)
{
#line 2070 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = 0;
  res.firstStem = loc;
  return res;
#line 2105 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::sadd_r(const TUSubsequence & lb, const mfeanswer & e)
{
#line 2019 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.energy = e.energy;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = e.firstStem.j;
  return res;
#line 2117 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::sp_r(const TUSubsequence & llb, const TUSubsequence & lb, const mfeanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 2142 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = llb.seq;
  res.firstStem.i = llb.i;
  res.firstStem.j = rrb.j;
  res.energy = (e.energy + sr_energy(res.firstStem, res.firstStem));
  return res;
#line 2129 "hishapeb_mfe_pp.cc"
}

mfeanswer hbmfepp::sr_r(const TUSubsequence & lb, const mfeanswer & e, const TUSubsequence & rb)
{
#line 2117 "hishapes_lm_nolp.gap.cc"
  mfeanswer res;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.energy = (e.energy + sr_energy(res.firstStem, res.firstStem));
  return res;
#line 2141 "hishapeb_mfe_pp.cc"
}


    void hbmfepp::cyk()
{

}



#ident "$Id: Compiled with gapc bellmansgapc-2012.05.07 $"

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_struct(unsigned int t_0_i)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_struct(t_0_i);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_struct_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_struct_Back<hbmfepp, String, unsigned int> (this, t_0_i);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_struct_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_dangle(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_dangle_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_dangle_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_dangle_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_initstem(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_initstem(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_initstem_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_initstem_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_initstem_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_closed(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_closed(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_closed_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_closed_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_closed_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_stack(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_stack_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_stack_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_stack_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::bt_proxy_nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  l;
  std::pair<Rope, mfeanswer>  ret = nt_hairpin(t_0_i, t_0_j);
  if (is_empty(ret))
  {
    empty( l);
    return l;
  }

  intrusive_ptr<Backtrace_nt_hairpin_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_hairpin_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  l.first = ret;
  l.second = new Backtrace_nt_hairpin_Front<String, unsigned int> (bt);
  set_value( l);
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_leftB(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_leftB_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_leftB_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_leftB_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_rightB(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_rightB_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_rightB_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_rightB_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_iloop(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_iloop_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_iloop_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_iloop_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_multiloop(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_multiloop_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_multiloop_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_multiloop_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_ml_comps(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_ml_comps_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_ml_comps_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::bt_proxy_nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > l;
  empty(l);
  hbmfepp_hash_h ret = nt_ml_comps1(t_0_i, t_0_j);
  if (is_empty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps1_Back<hbmfepp, String, unsigned int>  >  bt = new Backtrace_nt_ml_comps1_Back<hbmfepp, String, unsigned int> (this, t_0_i, t_0_j);
  for (hbmfepp_hash_h::iterator elem_itr = ret.ref().begin(); elem_itr!=ret.ref().end(); ++elem_itr){
    std::pair<Rope, mfeanswer>  elem = *elem_itr;
    std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  tupel;
    tupel.first = elem;
    tupel.second = new Backtrace_nt_ml_comps1_Front<String, unsigned int> (bt);
    set_value( tupel);
    push_back( l, tupel);
  }
  return l;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_closed(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!closed_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_0 = bt_proxy_nt_stack(t_0_i, t_0_j);
  append( answers, ret_0);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret_1 = bt_proxy_nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back( answers, ret_1);
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_2 = bt_proxy_nt_leftB(t_0_i, t_0_j);
  append( answers, ret_2);
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3 = bt_proxy_nt_rightB(t_0_i, t_0_j);
  append( answers, ret_3);
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_4 = bt_proxy_nt_iloop(t_0_i, t_0_j);
  append( answers, ret_4);
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_5 = bt_proxy_nt_multiloop(t_0_i, t_0_j);
  append( answers, ret_5);
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers, closed_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!dangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_2 = bt_proxy_nt_initstem((t_0_i + 1), t_0_j);
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_1 = *x_1_itr;
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = edl_bt(a_0, x_1);
            if (ans.first.second.energy <= _thresh)  // rule1
              {
                push_back( answers, ans);
              }

          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_3 = ret_5;
    if (is_not_empty(a_3))
    {
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_4 = bt_proxy_nt_initstem(t_0_i, (t_0_j - 1));
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_4;
      if (is_not_empty(a_2))
        {
          for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = edr_bt(x_2, a_3);
            if (ans.first.second.energy <= _thresh)  // rule1
              {
                push_back( answers, ans);
              }

          }
        }

      erase( a_2);
    }

    erase( a_3);
  }


  if (((t_0_j - t_0_i) >= 9))
  {
    TUSubsequence ret_9 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_6 = ret_9;
    if (is_not_empty(a_6))
    {
      TUSubsequence ret_7 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      TUSubsequence a_4 = ret_7;
      if (is_not_empty(a_4))
      {
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_8 = bt_proxy_nt_initstem((t_0_i + 1), (t_0_j - 1));
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_5 = ret_8;
        if (is_not_empty(a_5))
          {
            for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_5 = *x_5_itr;
              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = edlr_bt(a_4, x_5, a_6);
              if (ans.first.second.energy <= _thresh)  // rule1
                {
                  push_back( answers, ans);
                }

            }
          }

        erase( a_5);
      }

      erase( a_4);
    }

    erase( a_6);
  }


  if (((t_0_j - t_0_i) >= 7))
  {
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_11 = bt_proxy_nt_initstem(t_0_i, t_0_j);
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_7 = ret_11;
    if (is_not_empty(a_7))
      {
        for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_7 = *x_7_itr;
          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = drem_bt(x_7);
          if (ans.first.second.energy <= _thresh)  // rule1
            {
              push_back( answers, ans);
            }

        }
      }

    erase( a_7);
  }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers, dangle_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return 0;
    }

  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  answers;
  empty( answers);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret_0;
  if (((t_0_j - t_0_i) >= 7))
    {
      if (((!_exact) && pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_h, _theta)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_h)))  // added
      {                                                                                                                                                               // added
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_4 = ret_5;
        if (is_not_empty(a_4))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_3 = ret_4;
          if (is_not_empty(a_3))
          {
            TUSubsequence ret_3;
            if (minsize(t_0_seq, (t_0_i + 2), (t_0_j - 2), 3))
              {
                ret_3 = REGION(t_0_seq, (t_0_i + 2), (t_0_j - 2));
              }

            else
              {
                empty( ret_3);
              }

            TUSubsequence a_2 = ret_3;
            if (is_not_empty(a_2))
            {
              TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                  {
                    ret_0 = hl_bt(a_0, a_1, a_2, a_3, a_4);
                  }

                else
                  {
                    empty( ret_0);
                  }

                erase( a_0);
              }

              else
                {
                  empty( ret_0);
                }

              erase( a_1);
            }

            else
              {
                empty( ret_0);
              }

            erase( a_2);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_3);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_4);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(answers);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 13))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 13))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_i)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_b)))  // added
      {                                                                                                                                                                                                                          // added
        TUSubsequence ret_8 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_7 = ret_8;
        if (is_not_empty(a_7))
        {
          TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_6 = ret_7;
          if (is_not_empty(a_6))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 9))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 1); ((t_0_k_0 <= ((t_0_j - 2) - 8)) && (t_0_k_0 <= ((t_0_i + 2) + 30))); ++t_0_k_0)
                    {
                      for(                      unsigned int t_0_k_1 = ((((t_0_j - 2) - (t_0_k_0 + 7)) >= 30)) ? (((t_0_j - 2) - 30)) : ((t_0_k_0 + 7)); (t_0_k_1 <= ((t_0_j - 2) - 1)); ++t_0_k_1)
                      {
                        TUSubsequence ret_6;
                        if (maxsize(t_0_seq, t_0_k_1, (t_0_j - 2), 30))
                          {
                            ret_6 = REGION(t_0_seq, t_0_k_1, (t_0_j - 2));
                          }

                        else
                          {
                            empty( ret_6);
                          }

                        TUSubsequence a_5 = ret_6;
                        if (is_not_empty(a_5))
                        {
                          TUSubsequence ret_4;
                          if (maxsize(t_0_seq, (t_0_i + 2), t_0_k_0, 30))
                            {
                              ret_4 = REGION(t_0_seq, (t_0_i + 2), t_0_k_0);
                            }

                          else
                            {
                              empty( ret_4);
                            }

                          TUSubsequence a_3 = ret_4;
                          if (is_not_empty(a_3))
                          {
                            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_5 = bt_proxy_nt_closed(t_0_k_0, t_0_k_1);
                            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_4 = ret_5;
                            if (is_not_empty(a_4))
                              {
                                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_4 = *x_4_itr;
                                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = il_bt(a_3, x_4, a_5);
                                  push_back( ret_3, ans);
                                }
                              }

                            erase( a_4);
                          }

                          erase( a_3);
                        }

                        erase( a_5);
                      }

                    }

                  }

                finalize( ret_3);
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sp_bt(a_0, a_1, x_2, a_6, a_7);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_6);
        }

        erase( a_7);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_initstem(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
  {
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_1 = bt_proxy_nt_closed(t_0_i, t_0_j);
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_0 = ret_1;
    if (is_not_empty(a_0))
      {
        for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_0 = *x_0_itr;
          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = is_bt(x_0);
          push_back( answers, ans);
        }
      }

    erase( a_0);
  }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_b)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_i)))  // added
      {                                                                                                                                                                                                                          // added
        TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_7;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_5 = ret_6;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 8))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 1); (t_0_k_0 <= ((t_0_j - 2) - 7)); ++t_0_k_0)
                    {
                      TUSubsequence ret_4 = REGION(t_0_seq, (t_0_i + 2), t_0_k_0);
                      TUSubsequence a_3 = ret_4;
                      if (is_not_empty(a_3))
                      {
                        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_5 = bt_proxy_nt_closed(t_0_k_0, (t_0_j - 2));
                        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_4 = ret_5;
                        if (is_not_empty(a_4))
                          {
                            for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_4 = *x_4_itr;
                              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = bl_bt(a_3, x_4);
                              push_back( ret_3, ans);
                            }
                          }

                        erase( a_4);
                      }

                      erase( a_3);
                    }

                  }

                finalize( ret_3);
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sp_bt(a_0, a_1, x_2, a_5, a_6);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_5);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3 = bt_proxy_nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_1;
          empty(ret_1);
          if (((t_0_k_0 - t_0_i) >= 7))
          {
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_2 = bt_proxy_nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = incl_bt(x_1);
                  push_back( ret_1, ans);
                }
              }

            erase( a_1);
          }

          finalize( ret_1);
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = cadd_bt(x_0, x_2);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator elem_itr = a_2.ref().begin(); elem_itr!=a_2.ref().end(); ++elem_itr){
              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 15))
  {
    TUSubsequence ret_5 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_3 = ret_5;
    if (is_not_empty(a_3))
    {
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_6 = bt_proxy_nt_ml_comps((t_0_i + 1), t_0_j);
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_4 = ret_6;
      if (is_not_empty(a_4))
        {
          for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_4 = *x_4_itr;
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sadd_bt(a_3, x_4);
            push_back( answers, ans);
          }
        }

      erase( a_4);
    }

    erase( a_3);
  }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers, ml_comps_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3 = bt_proxy_nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_1;
          empty(ret_1);
          if (((t_0_k_0 - t_0_i) >= 7))
          {
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_2 = bt_proxy_nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = incl_bt(x_1);
                  push_back( ret_1, ans);
                }
              }

            erase( a_1);
          }

          finalize( ret_1);
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = cadd_bt(x_0, x_2);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator elem_itr = a_2.ref().begin(); elem_itr!=a_2.ref().end(); ++elem_itr){
              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_5 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_3 = ret_5;
    if (is_not_empty(a_3))
    {
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_6 = bt_proxy_nt_ml_comps1((t_0_i + 1), t_0_j);
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_4 = ret_6;
      if (is_not_empty(a_4))
        {
          for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_4 = *x_4_itr;
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sadd_bt(a_3, x_4);
            push_back( answers, ans);
          }
        }

      erase( a_4);
    }

    erase( a_3);
  }


  if (((t_0_j - t_0_i) >= 7))
  {
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_8 = bt_proxy_nt_dangle(t_0_i, t_0_j);
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_5 = ret_8;
    if (is_not_empty(a_5))
      {
        for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_5 = *x_5_itr;
          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = incl_bt(x_5);
          push_back( answers, ans);
        }
      }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 1)); ++t_0_k_1)
      {
        TUSubsequence ret_12 = REGION(t_0_seq, t_0_k_1, t_0_j);
        TUSubsequence a_8 = ret_12;
        if (is_not_empty(a_8))
        {
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_10;
          empty(ret_10);
          if (((t_0_k_1 - t_0_i) >= 7))
          {
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_11 = bt_proxy_nt_dangle(t_0_i, t_0_k_1);
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_7 = ret_11;
            if (is_not_empty(a_7))
              {
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_7 = *x_7_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = incl_bt(x_7);
                  push_back( ret_10, ans);
                }
              }

            erase( a_7);
          }

          finalize( ret_10);
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_6 = ret_10;
          if (is_not_empty(a_6))
            {
              for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_6 = *x_6_itr;
                std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = addss_bt(x_6, a_8);
                push_back( answers, ans);
              }
            }

          erase( a_6);
        }

        erase( a_8);
      }

    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers, ml_comps1_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 18))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 18))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_4 = ret_5;
        if (is_not_empty(a_4))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_3 = ret_4;
          if (is_not_empty(a_3))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3 = bt_proxy_nt_ml_comps((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = ml_bt(a_0, a_1, x_2, a_3, a_4);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_3);
        }

        erase( a_4);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 19))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_12 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_10 = ret_12;
        if (is_not_empty(a_10))
        {
          TUSubsequence ret_11 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_9 = ret_11;
          if (is_not_empty(a_9))
          {
            TUSubsequence ret_9 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
            TUSubsequence a_7 = ret_9;
            if (is_not_empty(a_7))
            {
              TUSubsequence ret_8 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_6 = ret_8;
              if (is_not_empty(a_6))
              {
                TUSubsequence ret_7 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_5 = ret_7;
                if (is_not_empty(a_5))
                {
                  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_10 = bt_proxy_nt_ml_comps((t_0_i + 3), (t_0_j - 2));
                  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_8 = ret_10;
                  if (is_not_empty(a_8))
                    {
                      for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_8_itr = a_8.ref().begin(); x_8_itr!=a_8.ref().end(); ++x_8_itr){
                        std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_8 = *x_8_itr;
                        std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = mldl_bt(a_5, a_6, a_7, x_8, a_9, a_10);
                        push_back( answers, ans);
                      }
                    }

                  erase( a_8);
                }

                erase( a_5);
              }

              erase( a_6);
            }

            erase( a_7);
          }

          erase( a_9);
        }

        erase( a_10);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 19))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_19 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_16 = ret_19;
        if (is_not_empty(a_16))
        {
          TUSubsequence ret_18 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_15 = ret_18;
          if (is_not_empty(a_15))
          {
            TUSubsequence ret_17 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
            TUSubsequence a_14 = ret_17;
            if (is_not_empty(a_14))
            {
              TUSubsequence ret_15 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_12 = ret_15;
              if (is_not_empty(a_12))
              {
                TUSubsequence ret_14 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_11 = ret_14;
                if (is_not_empty(a_11))
                {
                  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_16 = bt_proxy_nt_ml_comps((t_0_i + 2), (t_0_j - 3));
                  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_13 = ret_16;
                  if (is_not_empty(a_13))
                    {
                      for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_13_itr = a_13.ref().begin(); x_13_itr!=a_13.ref().end(); ++x_13_itr){
                        std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_13 = *x_13_itr;
                        std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = mldr_bt(a_11, a_12, x_13, a_14, a_15, a_16);
                        push_back( answers, ans);
                      }
                    }

                  erase( a_13);
                }

                erase( a_11);
              }

              erase( a_12);
            }

            erase( a_14);
          }

          erase( a_15);
        }

        erase( a_16);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 20))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_m)))  // added
      {                                                                                                                                         // added
        TUSubsequence ret_27 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_23 = ret_27;
        if (is_not_empty(a_23))
        {
          TUSubsequence ret_26 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_22 = ret_26;
          if (is_not_empty(a_22))
          {
            TUSubsequence ret_25 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
            TUSubsequence a_21 = ret_25;
            if (is_not_empty(a_21))
            {
              TUSubsequence ret_23 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
              TUSubsequence a_19 = ret_23;
              if (is_not_empty(a_19))
              {
                TUSubsequence ret_22 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
                TUSubsequence a_18 = ret_22;
                if (is_not_empty(a_18))
                {
                  TUSubsequence ret_21 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                  TUSubsequence a_17 = ret_21;
                  if (is_not_empty(a_17))
                  {
                    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_24 = bt_proxy_nt_ml_comps((t_0_i + 3), (t_0_j - 3));
                    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_20 = ret_24;
                    if (is_not_empty(a_20))
                      {
                        for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_20_itr = a_20.ref().begin(); x_20_itr!=a_20.ref().end(); ++x_20_itr){
                          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_20 = *x_20_itr;
                          std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = mldlr_bt(a_17, a_18, a_19, x_20, a_21, a_22, a_23);
                          push_back( answers, ans);
                        }
                      }

                    erase( a_20);
                  }

                  erase( a_17);
                }

                erase( a_18);
              }

              erase( a_19);
            }

            erase( a_21);
          }

          erase( a_22);
        }

        erase( a_23);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (((!_exact) && stackpairing(t_0_seq, t_0_i, t_0_j)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_b)) || ((_exact) && exact_pairing_center_at(t_0_seq, t_0_i, t_0_j, _match_tokens_i)))  // added
      {                                                                                                                                                                                                                          // added
        TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_7;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_5 = ret_6;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 8))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 7); (t_0_k_0 <= ((t_0_j - 2) - 1)); ++t_0_k_0)
                    {
                      TUSubsequence ret_5 = REGION(t_0_seq, t_0_k_0, (t_0_j - 2));
                      TUSubsequence a_4 = ret_5;
                      if (is_not_empty(a_4))
                      {
                        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_4 = bt_proxy_nt_closed((t_0_i + 2), t_0_k_0);
                        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_3 = ret_4;
                        if (is_not_empty(a_3))
                          {
                            for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_3 = *x_3_itr;
                              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = br_bt(x_3, a_4);
                              push_back( ret_3, ans);
                            }
                          }

                        erase( a_3);
                      }

                      erase( a_4);
                    }

                  }

                finalize( ret_3);
                List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_2 = *x_2_itr;
                      std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sp_bt(a_0, a_1, x_2, a_5, a_6);
                      push_back( answers, ans);
                    }
                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_5);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 9))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_2 = bt_proxy_nt_closed((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sr_bt(a_0, x_1, a_2);
                  push_back( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bt_nt_struct(unsigned int t_0_i)
{
  if (!struct_table.is_tabulated(t_0_i))
    {
      return 0;
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_2 = bt_proxy_nt_struct(t_0_k_0);
        List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_1 = bt_proxy_nt_dangle(t_0_i, t_0_k_0);
          List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = cadd_bt(x_0, x_1);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator elem_itr = a_1.ref().begin(); elem_itr!=a_1.ref().end(); ++elem_itr){
              std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_4 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_2 = ret_4;
    if (is_not_empty(a_2))
    {
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > ret_5 = bt_proxy_nt_struct((t_0_i + 1));
      List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > a_3 = ret_5;
      if (is_not_empty(a_3))
        {
          for (List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  x_3 = *x_3_itr;
            std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ans = sadd_bt(a_2, x_3);
            push_back( answers, ans);
          }
        }

      erase( a_3);
    }

    erase( a_2);
  }

  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret_6;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_7 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_4 = ret_7;
    if (is_not_empty(a_4))
      {
        ret_6 = nil_bt(a_4);
      }

    else
      {
        empty( ret_6);
      }

    erase( a_4);
  }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back( answers, ret_6);
    }

  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > eval = h_bt(answers, struct_table.get(t_0_i));
  erase( answers);
  intrusive_ptr<Backtrace<String, unsigned int> >  bt_list = execute_backtrack_k(eval);
  erase( eval);
  return bt_list;
}


intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::addss_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0, const TUSubsequence & param_1)
{
  return new Backtrace_addss<String, unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::bl_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1)
{
  return new Backtrace_bl<String, unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::br_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0, const TUSubsequence & param_1)
{
  return new Backtrace_br<String, unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::cadd_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1)
{
  return new Backtrace_cadd<String, unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::drem_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0)
{
  return new Backtrace_drem<String, unsigned int> (param_0);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::edl_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1)
{
  return new Backtrace_edl<String, unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::edlr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_edlr<String, unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::edr_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0, const TUSubsequence & param_1)
{
  return new Backtrace_edr<String, unsigned int> (param_0, param_1);
}

List_Ref<intrusive_ptr<Backtrace<String, unsigned int> > > hbmfepp::h_bt_r(List_Ref<intrusive_ptr<Backtrace<String, unsigned int> > > param_0)
{
  return param_0;
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::hl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, const TUSubsequence & param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_hl<String, unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::il_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_il<String, unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::incl_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0)
{
  return new Backtrace_incl<String, unsigned int> (param_0);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::is_bt_r(intrusive_ptr<Backtrace<String, unsigned int> >  param_0)
{
  return new Backtrace_is<String, unsigned int> (param_0);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::ml_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<String, unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_ml<String, unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::mldl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, const TUSubsequence & param_2, intrusive_ptr<Backtrace<String, unsigned int> >  param_3, const TUSubsequence & param_4, const TUSubsequence & param_5)
{
  return new Backtrace_mldl<String, unsigned int> (param_0, param_1, param_2, param_3, param_4, param_5);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::mldlr_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, const TUSubsequence & param_2, intrusive_ptr<Backtrace<String, unsigned int> >  param_3, const TUSubsequence & param_4, const TUSubsequence & param_5, const TUSubsequence & param_6)
{
  return new Backtrace_mldlr<String, unsigned int> (param_0, param_1, param_2, param_3, param_4, param_5, param_6);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::mldr_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<String, unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4, const TUSubsequence & param_5)
{
  return new Backtrace_mldr<String, unsigned int> (param_0, param_1, param_2, param_3, param_4, param_5);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::nil_bt_r(const TUSubsequence & param_0)
{
  return new Backtrace_nil<String, unsigned int> (param_0);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::sadd_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1)
{
  return new Backtrace_sadd<String, unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::sp_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<String, unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_sp<String, unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<String, unsigned int> >  hbmfepp::sr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<String, unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_sr<String, unsigned int> (param_0, param_1, param_2);
}



std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::addss_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_e.first;
  TUSubsequence l_1 = p_p_rb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_e.second;
  TUSubsequence r_1 = p_p_rb;
  std::pair<Rope, mfeanswer>  ret_left = addss(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = addss_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::bl_bt(const TUSubsequence & p_p_lregion, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e)
{
  TUSubsequence l_0 = p_p_lregion;
  std::pair<Rope, mfeanswer>  l_1 = p_p_e.first;
  TUSubsequence r_0 = p_p_lregion;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_e.second;
  std::pair<Rope, mfeanswer>  ret_left = bl(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = bl_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::br_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rregion)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_e.first;
  TUSubsequence l_1 = p_p_rregion;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_e.second;
  TUSubsequence r_1 = p_p_rregion;
  std::pair<Rope, mfeanswer>  ret_left = br(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = br_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::cadd_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_le, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_re)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_le.first;
  std::pair<Rope, mfeanswer>  l_1 = p_p_re.first;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_le.second;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_re.second;
  std::pair<Rope, mfeanswer>  ret_left = cadd(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = cadd_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::drem_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_e.first;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_e.second;
  std::pair<Rope, mfeanswer>  ret_left = drem(l_0);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = drem_bt_r(r_0);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::edl_bt(const TUSubsequence & p_p_lb, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<Rope, mfeanswer>  l_1 = p_p_e.first;
  TUSubsequence r_0 = p_p_lb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_e.second;
  std::pair<Rope, mfeanswer>  ret_left = edl(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = edl_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::edlr_bt(const TUSubsequence & p_p_lb, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<Rope, mfeanswer>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rb;
  std::pair<Rope, mfeanswer>  ret_left = edlr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = edlr_bt_r(r_0, r_1, r_2);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::edr_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_e.first;
  TUSubsequence l_1 = p_p_rb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_e.second;
  TUSubsequence r_1 = p_p_rb;
  std::pair<Rope, mfeanswer>  ret_left = edr(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = edr_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::h_bt(List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > i, hbmfepp_hash_h &  left_answers)
{
  std::pair<List<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator, List<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator> range = get_range(i);
  return h_bt(range);
}

template <typename Iterator>
List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::h_bt(std::pair<Iterator, Iterator> i, hbmfepp_hash_h &  left_answers)

{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);


  if (is_empty(left_answers))
  {
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > temp;
    empty(temp);
    empty( temp);
    erase( left_answers);
    return temp;
  }

  for (hbmfepp_hash_h::iterator elem = left_answers.ref().begin(); elem!=left_answers.ref().end(); ++elem){
    for (Iterator tupel = i.first; tupel != i.second; ++tupel) {
      if (((*tupel).first == (*elem)))
      {
        push_back( answers, (*tupel));
        break;
      }

    }
  }
  return answers;
}

List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::h_bt(List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > i)
{
  std::pair<List<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator, List<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > >::iterator> range = get_range(i);
  return h_bt(range);
}

template <typename Iterator>
List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > hbmfepp::h_bt(std::pair<Iterator, Iterator> i)

{
  List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  std::pair<Proxy::Iterator<Iterator, select1st<typename Iterator::value_type> >  ,Proxy::Iterator<Iterator, select1st<typename Iterator::value_type> > >  left = splice_left(i);
  hbmfepp_hash_h left_answers = h(left);
  if (is_empty(left_answers))
  {
    List_Ref<std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > > temp;
    empty(temp);
    empty( temp);
    erase( left_answers);
    return temp;
  }

  for (hbmfepp_hash_h::iterator elem = left_answers.ref().begin(); elem!=left_answers.ref().end(); ++elem){
    for (Iterator tupel = i.first; tupel != i.second; ++tupel) {
      if (((*tupel).first == (*elem)))
      {
        push_back( answers, (*tupel));
        break;
      }

    }
  }
  return answers;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::hl_bt(const TUSubsequence & p_p_llb, const TUSubsequence & p_p_lb, const TUSubsequence & p_p_region, const TUSubsequence & p_p_rb, const TUSubsequence & p_p_rrb)
{
  TUSubsequence l_0 = p_p_llb;
  TUSubsequence l_1 = p_p_lb;
  TUSubsequence l_2 = p_p_region;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence l_4 = p_p_rrb;
  TUSubsequence r_0 = p_p_llb;
  TUSubsequence r_1 = p_p_lb;
  TUSubsequence r_2 = p_p_region;
  TUSubsequence r_3 = p_p_rb;
  TUSubsequence r_4 = p_p_rrb;
  std::pair<Rope, mfeanswer>  ret_left = hl(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = hl_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::il_bt(const TUSubsequence & p_p_lregion, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rregion)
{
  TUSubsequence l_0 = p_p_lregion;
  std::pair<Rope, mfeanswer>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rregion;
  TUSubsequence r_0 = p_p_lregion;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rregion;
  std::pair<Rope, mfeanswer>  ret_left = il(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = il_bt_r(r_0, r_1, r_2);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::incl_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_e.first;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_e.second;
  std::pair<Rope, mfeanswer>  ret_left = incl(l_0);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = incl_bt_r(r_0);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::is_bt(const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e)
{
  std::pair<Rope, mfeanswer>  l_0 = p_p_e.first;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_0 = p_p_e.second;
  std::pair<Rope, mfeanswer>  ret_left = is(l_0);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = is_bt_r(r_0);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::ml_bt(const TUSubsequence & p_p_llb, const TUSubsequence & p_p_lb, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb, const TUSubsequence & p_p_rrb)
{
  TUSubsequence l_0 = p_p_llb;
  TUSubsequence l_1 = p_p_lb;
  std::pair<Rope, mfeanswer>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence l_4 = p_p_rrb;
  TUSubsequence r_0 = p_p_llb;
  TUSubsequence r_1 = p_p_lb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_rb;
  TUSubsequence r_4 = p_p_rrb;
  std::pair<Rope, mfeanswer>  ret_left = ml(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = ml_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::mldl_bt(const TUSubsequence & p_p_llb, const TUSubsequence & p_p_lb, const TUSubsequence & p_p_dl, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb, const TUSubsequence & p_p_rrb)
{
  TUSubsequence l_0 = p_p_llb;
  TUSubsequence l_1 = p_p_lb;
  TUSubsequence l_2 = p_p_dl;
  std::pair<Rope, mfeanswer>  l_3 = p_p_e.first;
  TUSubsequence l_4 = p_p_rb;
  TUSubsequence l_5 = p_p_rrb;
  TUSubsequence r_0 = p_p_llb;
  TUSubsequence r_1 = p_p_lb;
  TUSubsequence r_2 = p_p_dl;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_3 = p_p_e.second;
  TUSubsequence r_4 = p_p_rb;
  TUSubsequence r_5 = p_p_rrb;
  std::pair<Rope, mfeanswer>  ret_left = mldl(l_0, l_1, l_2, l_3, l_4, l_5);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = mldl_bt_r(r_0, r_1, r_2, r_3, r_4, r_5);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::mldlr_bt(const TUSubsequence & p_p_llb, const TUSubsequence & p_p_lb, const TUSubsequence & p_p_dl, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_dr, const TUSubsequence & p_p_rb, const TUSubsequence & p_p_rrb)
{
  TUSubsequence l_0 = p_p_llb;
  TUSubsequence l_1 = p_p_lb;
  TUSubsequence l_2 = p_p_dl;
  std::pair<Rope, mfeanswer>  l_3 = p_p_e.first;
  TUSubsequence l_4 = p_p_dr;
  TUSubsequence l_5 = p_p_rb;
  TUSubsequence l_6 = p_p_rrb;
  TUSubsequence r_0 = p_p_llb;
  TUSubsequence r_1 = p_p_lb;
  TUSubsequence r_2 = p_p_dl;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_3 = p_p_e.second;
  TUSubsequence r_4 = p_p_dr;
  TUSubsequence r_5 = p_p_rb;
  TUSubsequence r_6 = p_p_rrb;
  std::pair<Rope, mfeanswer>  ret_left = mldlr(l_0, l_1, l_2, l_3, l_4, l_5, l_6);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = mldlr_bt_r(r_0, r_1, r_2, r_3, r_4, r_5, r_6);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::mldr_bt(const TUSubsequence & p_p_llb, const TUSubsequence & p_p_lb, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_dr, const TUSubsequence & p_p_rb, const TUSubsequence & p_p_rrb)
{
  TUSubsequence l_0 = p_p_llb;
  TUSubsequence l_1 = p_p_lb;
  std::pair<Rope, mfeanswer>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_dr;
  TUSubsequence l_4 = p_p_rb;
  TUSubsequence l_5 = p_p_rrb;
  TUSubsequence r_0 = p_p_llb;
  TUSubsequence r_1 = p_p_lb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_dr;
  TUSubsequence r_4 = p_p_rb;
  TUSubsequence r_5 = p_p_rrb;
  std::pair<Rope, mfeanswer>  ret_left = mldr(l_0, l_1, l_2, l_3, l_4, l_5);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = mldr_bt_r(r_0, r_1, r_2, r_3, r_4, r_5);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::nil_bt(const TUSubsequence & p_p_loc)
{
  TUSubsequence l_0 = p_p_loc;
  TUSubsequence r_0 = p_p_loc;
  std::pair<Rope, mfeanswer>  ret_left = nil(l_0);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = nil_bt_r(r_0);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::sadd_bt(const TUSubsequence & p_p_b, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e)
{
  TUSubsequence l_0 = p_p_b;
  std::pair<Rope, mfeanswer>  l_1 = p_p_e.first;
  TUSubsequence r_0 = p_p_b;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_e.second;
  std::pair<Rope, mfeanswer>  ret_left = sadd(l_0, l_1);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = sadd_bt_r(r_0, r_1);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::sp_bt(const TUSubsequence & p_p_llb, const TUSubsequence & p_p_lb, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb, const TUSubsequence & p_p_rrb)
{
  TUSubsequence l_0 = p_p_llb;
  TUSubsequence l_1 = p_p_lb;
  std::pair<Rope, mfeanswer>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence l_4 = p_p_rrb;
  TUSubsequence r_0 = p_p_llb;
  TUSubsequence r_1 = p_p_lb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_rb;
  TUSubsequence r_4 = p_p_rrb;
  std::pair<Rope, mfeanswer>  ret_left = sp(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = sp_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  hbmfepp::sr_bt(const TUSubsequence & p_p_lb, const std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > > & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<Rope, mfeanswer>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  intrusive_ptr<Backtrace<String, unsigned int> >  r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rb;
  std::pair<Rope, mfeanswer>  ret_left = sr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<String, unsigned int> >  ret_right = sr_bt_r(r_0, r_1, r_2);
  std::pair<std::pair<Rope, mfeanswer> , intrusive_ptr<Backtrace<String, unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}


