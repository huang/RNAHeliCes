
// A dynamic programming evaluator generated by GAP-C.
// 
//   GAP-C version:
//     bellmansgapc-2012.05.07
// 
//   GAP-C call:
//     /home/jhuang/gapc/bin/gapc hishapes.gap -i p_func -o p_func.cc -t 
// 
// 


#define GAPC_MOD_TRANSLATION_UNIT
#include "p_func.hh"

#include <rtlib/subopt.hh>
#include "rna.hh"
#include "filter_add.hh"
#include "mfe_answer.hh"

#include <rtlib/generic_opts.hh>

pfanswer &  p_func::nt_block_dl(unsigned int t_0_i, unsigned int t_0_j)
{
  if (block_dl_table.is_tabulated(t_0_i, t_0_j))
    {
      return block_dl_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 1); (t_0_k_0 <= (t_0_j - 8)); ++t_0_k_0)
      {
        TUSubsequence ret_1 = REGION(t_0_seq, t_0_i, t_0_k_0);
        TUSubsequence a_0 = ret_1;
        if (is_not_empty(a_0))
        {
          pfanswer ret_2 = nt_edanglel_ml(t_0_k_0, t_0_j);
          pfanswer a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            pfanswer ans = ssadd(a_0, a_1);
            push_back_sum( answers, ans);
          }

          erase( a_1);
        }

        erase( a_0);
      }

    }

  pfanswer ret_3;
  if (((t_0_j - t_0_i) >= 8))
  {
    pfanswer ret_4 = nt_edanglel_ml(t_0_i, t_0_j);
    pfanswer a_2 = ret_4;
    if (is_not_empty(a_2))
      {
        ret_3 = incl(a_2);
      }

    else
      {
        empty( ret_3);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_3);
    }

  if (is_not_empty(ret_3))
    {
      push_back_sum( answers, ret_3);
    }

  pfanswer eval = h(answers);
  erase( answers);
  block_dl_table.set( t_0_i, t_0_j, eval);
  return block_dl_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_block_dlr(unsigned int t_0_i, unsigned int t_0_j)
{
  if (block_dlr_table.is_tabulated(t_0_i, t_0_j))
    {
      return block_dlr_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 1); (t_0_k_0 <= (t_0_j - 9)); ++t_0_k_0)
      {
        TUSubsequence ret_1 = REGION(t_0_seq, t_0_i, t_0_k_0);
        TUSubsequence a_0 = ret_1;
        if (is_not_empty(a_0))
        {
          pfanswer ret_2 = nt_edanglelr_ml(t_0_k_0, t_0_j);
          pfanswer a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            pfanswer ans = ssadd(a_0, a_1);
            push_back_sum( answers, ans);
          }

          erase( a_1);
        }

        erase( a_0);
      }

    }

  pfanswer ret_3;
  if (((t_0_j - t_0_i) >= 9))
  {
    pfanswer ret_4 = nt_edanglelr_ml(t_0_i, t_0_j);
    pfanswer a_2 = ret_4;
    if (is_not_empty(a_2))
      {
        ret_3 = incl(a_2);
      }

    else
      {
        empty( ret_3);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_3);
    }

  if (is_not_empty(ret_3))
    {
      push_back_sum( answers, ret_3);
    }

  pfanswer eval = h(answers);
  erase( answers);
  block_dlr_table.set( t_0_i, t_0_j, eval);
  return block_dlr_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_closed(unsigned int t_0_i, unsigned int t_0_j)
{
  if (closed_table.is_tabulated(t_0_i, t_0_j))
    {
      return closed_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0 = nt_stack(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_1 = nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_sum( answers, ret_1);
    }

  pfanswer ret_2 = nt_multiloop(t_0_i, t_0_j);
  if (is_not_empty(ret_2))
    {
      push_back_sum( answers, ret_2);
    }

  pfanswer ret_3 = nt_leftB(t_0_i, t_0_j);
  if (is_not_empty(ret_3))
    {
      push_back_sum( answers, ret_3);
    }

  pfanswer ret_4 = nt_rightB(t_0_i, t_0_j);
  if (is_not_empty(ret_4))
    {
      push_back_sum( answers, ret_4);
    }

  pfanswer ret_5 = nt_iloop(t_0_i, t_0_j);
  if (is_not_empty(ret_5))
    {
      push_back_sum( answers, ret_5);
    }

  pfanswer eval = h(answers);
  erase( answers);
  closed_table.set( t_0_i, t_0_j, eval);
  return closed_table.get(t_0_i, t_0_j);
}

pfanswer p_func::nt_dl_or_ss_left_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0 = nt_ml_comps1(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_1 = nt_block_dl(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_sum( answers, ret_1);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer &  p_func::nt_dl_or_ss_left_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dl_or_ss_left_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return dl_or_ss_left_ss_end_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0 = nt_ml_comps4(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_1 = nt_block_dlr(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_sum( answers, ret_1);
    }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 9); (t_0_k_0 <= (t_0_j - 1)); ++t_0_k_0)
      {
        TUSubsequence ret_4 = REGION(t_0_seq, t_0_k_0, t_0_j);
        TUSubsequence a_1 = ret_4;
        if (is_not_empty(a_1))
        {
          pfanswer ret_3 = nt_block_dlr(t_0_i, t_0_k_0);
          pfanswer a_0 = ret_3;
          if (is_not_empty(a_0))
          {
            pfanswer ans = addss(a_0, a_1);
            push_back_sum( answers, ans);
          }

          erase( a_0);
        }

        erase( a_1);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  dl_or_ss_left_ss_end_table.set( t_0_i, t_0_j, eval);
  return dl_or_ss_left_ss_end_table.get(t_0_i, t_0_j);
}

pfanswer p_func::nt_edanglel_ml(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      pfanswer ret_2 = nt_initstem((t_0_i + 1), t_0_j);
      pfanswer a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = edl(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_edanglel_struct(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      pfanswer ret_2 = nt_initstem((t_0_i + 1), t_0_j);
      pfanswer a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = edl(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_edanglelr_ml(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 9))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 9))
  {
    TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        pfanswer ret_2 = nt_initstem((t_0_i + 1), (t_0_j - 1));
        pfanswer a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = edlr(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_edanglelr_struct(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 9))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 9))
  {
    TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        pfanswer ret_2 = nt_initstem((t_0_i + 1), (t_0_j - 1));
        pfanswer a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = edlr(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer &  p_func::nt_edangler_ml(unsigned int t_0_i, unsigned int t_0_j)
{
  if (edangler_ml_table.is_tabulated(t_0_i, t_0_j))
    {
      return edangler_ml_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_2 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_1 = ret_2;
    if (is_not_empty(a_1))
    {
      pfanswer ret_1 = nt_initstem(t_0_i, (t_0_j - 1));
      pfanswer a_0 = ret_1;
      if (is_not_empty(a_0))
        {
          ret_0 = edr(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_1);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  edangler_ml_table.set( t_0_i, t_0_j, eval);
  return edangler_ml_table.get(t_0_i, t_0_j);
}

pfanswer p_func::nt_edangler_struct(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 8))
  {
    TUSubsequence ret_2 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
    TUSubsequence a_1 = ret_2;
    if (is_not_empty(a_1))
    {
      pfanswer ret_1 = nt_initstem(t_0_i, (t_0_j - 1));
      pfanswer a_0 = ret_1;
      if (is_not_empty(a_0))
        {
          ret_0 = edr(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_1);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 7))
    {
      if (stackpairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_4 = ret_5;
        if (is_not_empty(a_4))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_3 = ret_4;
          if (is_not_empty(a_3))
          {
            TUSubsequence ret_3;
            if (minsize(t_0_seq, (t_0_i + 2), (t_0_j - 2), 3))
              {
                ret_3 = REGION(t_0_seq, (t_0_i + 2), (t_0_j - 2));
              }

            else
              {
                empty( ret_3);
              }

            TUSubsequence a_2 = ret_3;
            if (is_not_empty(a_2))
            {
              TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                  {
                    ret_0 = hl(a_0, a_1, a_2, a_3, a_4);
                  }

                else
                  {
                    empty( ret_0);
                  }

                erase( a_0);
              }

              else
                {
                  empty( ret_0);
                }

              erase( a_1);
            }

            else
              {
                empty( ret_0);
              }

            erase( a_2);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_3);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_4);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 13))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 13))
    {
      if (stackpairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_8 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_7 = ret_8;
        if (is_not_empty(a_7))
        {
          TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_6 = ret_7;
          if (is_not_empty(a_6))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                pfanswer ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 9))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 1); ((t_0_k_0 <= ((t_0_j - 2) - 8)) && (t_0_k_0 <= ((t_0_i + 2) + 30))); ++t_0_k_0)
                    {
                      for(                      unsigned int t_0_k_1 = ((((t_0_j - 2) - (t_0_k_0 + 7)) >= 30)) ? (((t_0_j - 2) - 30)) : ((t_0_k_0 + 7)); (t_0_k_1 <= ((t_0_j - 2) - 1)); ++t_0_k_1)
                      {
                        TUSubsequence ret_6;
                        if (maxsize(t_0_seq, t_0_k_1, (t_0_j - 2), 30))
                          {
                            ret_6 = REGION(t_0_seq, t_0_k_1, (t_0_j - 2));
                          }

                        else
                          {
                            empty( ret_6);
                          }

                        TUSubsequence a_5 = ret_6;
                        if (is_not_empty(a_5))
                        {
                          TUSubsequence ret_4;
                          if (maxsize(t_0_seq, (t_0_i + 2), t_0_k_0, 30))
                            {
                              ret_4 = REGION(t_0_seq, (t_0_i + 2), t_0_k_0);
                            }

                          else
                            {
                              empty( ret_4);
                            }

                          TUSubsequence a_3 = ret_4;
                          if (is_not_empty(a_3))
                          {
                            pfanswer ret_5 = nt_closed(t_0_k_0, t_0_k_1);
                            pfanswer a_4 = ret_5;
                            if (is_not_empty(a_4))
                            {
                              pfanswer ans = il(a_3, a_4, a_5);
                              push_back_sum( ret_3, ans);
                            }

                            erase( a_4);
                          }

                          erase( a_3);
                        }

                        erase( a_5);
                      }

                    }

                  }

                finalize( ret_3);
                pfanswer a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    pfanswer x_2 = a_2;
                    pfanswer ans = sp(a_0, a_1, x_2, a_6, a_7);
                    push_back_sum( answers, ans);

                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_6);
        }

        erase( a_7);
      }

      else
        {
          empty( answers);
        }

    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_initstem(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 7))
  {
    pfanswer ret_1 = nt_closed(t_0_i, t_0_j);
    pfanswer a_0 = ret_1;
    if (is_not_empty(a_0))
      {
        ret_0 = is(a_0);
      }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (stackpairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_7;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_5 = ret_6;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                pfanswer ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 8))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 1); (t_0_k_0 <= ((t_0_j - 2) - 7)); ++t_0_k_0)
                    {
                      TUSubsequence ret_4 = REGION(t_0_seq, (t_0_i + 2), t_0_k_0);
                      TUSubsequence a_3 = ret_4;
                      if (is_not_empty(a_3))
                      {
                        pfanswer ret_5 = nt_closed(t_0_k_0, (t_0_j - 2));
                        pfanswer a_4 = ret_5;
                        if (is_not_empty(a_4))
                        {
                          pfanswer ans = bl(a_3, a_4);
                          push_back_sum( ret_3, ans);
                        }

                        erase( a_4);
                      }

                      erase( a_3);
                    }

                  }

                finalize( ret_3);
                pfanswer a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    pfanswer x_2 = a_2;
                    pfanswer ans = sp(a_0, a_1, x_2, a_5, a_6);
                    push_back_sum( answers, ans);

                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_5);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer &  p_func::nt_left_dangle(unsigned int t_0_i)
{
  if (left_dangle_table.is_tabulated(t_0_i))
    {
      return left_dangle_table.get(t_0_i);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 16))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 8); (t_0_k_0 <= (t_0_right_most - 8)); ++t_0_k_0)
      {
        TUSubsequence ret_2 = BASE(t_0_seq, t_0_k_0, (t_0_k_0 + 1));
        TUSubsequence a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          pfanswer ret_3 = nt_noleft_dangle((t_0_k_0 + 1));
          pfanswer a_2 = ret_3;
          if (is_not_empty(a_2))
          {
            pfanswer ret_1 = nt_edanglel_struct(t_0_i, t_0_k_0);
            pfanswer a_0 = ret_1;
            if (is_not_empty(a_0))
            {
              pfanswer ans = ambd(a_0, a_1, a_2);
              push_back_sum( answers, ans);
            }

            erase( a_0);
          }

          erase( a_2);
        }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 8); (t_0_k_1 <= t_0_right_most); ++t_0_k_1)
      {
        pfanswer ret_6;
        empty(ret_6);
        empty( ret_6);
        pfanswer ret_7 = nt_noleft_dangle(t_0_k_1);
        if (is_not_empty(ret_7))
          {
            push_back_sum( ret_6, ret_7);
          }

        pfanswer ret_8;
        if ((((t_0_right_most - t_0_k_1) >= 0) && ((t_0_right_most - t_0_k_1) <= 0)))
        {
          TUSubsequence ret_9 = LOC(t_0_seq, t_0_k_1, t_0_k_1);
          TUSubsequence a_5 = ret_9;
          if (is_not_empty(a_5))
            {
              ret_8 = nil_Pr(a_5);
            }

          else
            {
              empty( ret_8);
            }

          erase( a_5);
        }

        else
          {
            empty( ret_8);
          }

        if (is_not_empty(ret_8))
          {
            push_back_sum( ret_6, ret_8);
          }

        finalize( ret_6);
        pfanswer a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          pfanswer ret_5 = nt_edanglel_struct(t_0_i, t_0_k_1);
          pfanswer a_3 = ret_5;
          if (is_not_empty(a_3))
            {
              pfanswer x_4 = a_4;
              pfanswer ans = cadd_Pr(a_3, x_4);
              push_back_sum( answers, ans);

            }

          erase( a_3);
        }

        erase( a_4);
      }

    }


  if (((t_0_right_most - t_0_i) >= 9))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 9); (t_0_k_2 <= t_0_right_most); ++t_0_k_2)
      {
        pfanswer ret_12;
        empty(ret_12);
        empty( ret_12);
        pfanswer ret_13 = nt_left_dangle(t_0_k_2);
        if (is_not_empty(ret_13))
          {
            push_back_sum( ret_12, ret_13);
          }

        pfanswer ret_14 = nt_left_unpaired(t_0_k_2);
        if (is_not_empty(ret_14))
          {
            push_back_sum( ret_12, ret_14);
          }

        finalize( ret_12);
        pfanswer a_7 = ret_12;
        if (is_not_empty(a_7))
        {
          pfanswer ret_11 = nt_edanglelr_struct(t_0_i, t_0_k_2);
          pfanswer a_6 = ret_11;
          if (is_not_empty(a_6))
            {
              pfanswer x_7 = a_7;
              pfanswer ans = cadd(a_6, x_7);
              push_back_sum( answers, ans);

            }

          erase( a_6);
        }

        erase( a_7);
      }

    }

  pfanswer ret_15;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_16 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_8 = ret_16;
    if (is_not_empty(a_8))
      {
        ret_15 = nil(a_8);
      }

    else
      {
        empty( ret_15);
      }

    erase( a_8);
  }

  else
    {
      empty( ret_15);
    }

  if (is_not_empty(ret_15))
    {
      push_back_sum( answers, ret_15);
    }

  pfanswer eval = h(answers);
  erase( answers);
  left_dangle_table.set( t_0_i, eval);
  return left_dangle_table.get(t_0_i);
}

pfanswer &  p_func::nt_left_unpaired(unsigned int t_0_i)
{
  if (left_unpaired_table.is_tabulated(t_0_i))
    {
      return left_unpaired_table.get(t_0_i);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_right_most - t_0_i) >= 2))
  {
    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      pfanswer ret_2 = nt_left_unpaired((t_0_i + 1));
      pfanswer a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = sadd(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_3;
  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_4 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
    TUSubsequence a_2 = ret_4;
    if (is_not_empty(a_2))
    {
      pfanswer ret_5 = nt_left_dangle((t_0_i + 1));
      pfanswer a_3 = ret_5;
      if (is_not_empty(a_3))
        {
          ret_3 = sadd(a_2, a_3);
        }

      else
        {
          empty( ret_3);
        }

      erase( a_3);
    }

    else
      {
        empty( ret_3);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_3);
    }

  if (is_not_empty(ret_3))
    {
      push_back_sum( answers, ret_3);
    }

  pfanswer eval = h(answers);
  erase( answers);
  left_unpaired_table.set( t_0_i, eval);
  return left_unpaired_table.get(t_0_i);
}

pfanswer &  p_func::nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps1_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 15))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 8); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        pfanswer ret_2 = nt_no_dl_no_ss_end(t_0_k_0, t_0_j);
        pfanswer a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          pfanswer ret_1 = nt_block_dl(t_0_i, t_0_k_0);
          pfanswer a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            pfanswer ans = combine(a_0, a_1);
            push_back_sum( answers, ans);
          }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_j - t_0_i) >= 17))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 9); (t_0_k_1 <= (t_0_j - 8)); ++t_0_k_1)
      {
        pfanswer ret_5 = nt_dl_or_ss_left_no_ss_end(t_0_k_1, t_0_j);
        pfanswer a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          pfanswer ret_4 = nt_block_dlr(t_0_i, t_0_k_1);
          pfanswer a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            pfanswer ans = combine(a_2, a_3);
            push_back_sum( answers, ans);
          }

          erase( a_2);
        }

        erase( a_3);
      }

    }


  if (((t_0_j - t_0_i) >= 16))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 8); (t_0_k_2 <= (t_0_j - 8)); ++t_0_k_2)
      {
        TUSubsequence ret_8 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
        TUSubsequence a_5 = ret_8;
        if (is_not_empty(a_5))
        {
          pfanswer ret_9 = nt_no_dl_no_ss_end((t_0_k_2 + 1), t_0_j);
          pfanswer a_6 = ret_9;
          if (is_not_empty(a_6))
          {
            pfanswer ret_7 = nt_block_dl(t_0_i, t_0_k_2);
            pfanswer a_4 = ret_7;
            if (is_not_empty(a_4))
            {
              pfanswer ans = acomb(a_4, a_5, a_6);
              push_back_sum( answers, ans);
            }

            erase( a_4);
          }

          erase( a_6);
        }

        erase( a_5);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  ml_comps1_table.set( t_0_i, t_0_j, eval);
  return ml_comps1_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_ml_comps2(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps2_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps2_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        pfanswer ret_3 = nt_no_dl_no_ss_end(t_0_k_0, t_0_j);
        pfanswer a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          pfanswer ret_1;
          if (((t_0_k_0 - t_0_i) >= 7))
          {
            pfanswer ret_2 = nt_nodangle_ml(t_0_i, t_0_k_0);
            pfanswer a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_1 = incl(a_1);
              }

            else
              {
                empty( ret_1);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_1);
            }

          pfanswer a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            pfanswer ans = combine(a_0, a_2);
            push_back_sum( answers, ans);
          }

          erase( a_0);
        }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 16))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 8); (t_0_k_1 <= (t_0_j - 8)); ++t_0_k_1)
      {
        pfanswer ret_7 = nt_dl_or_ss_left_no_ss_end(t_0_k_1, t_0_j);
        pfanswer a_5 = ret_7;
        if (is_not_empty(a_5))
        {
          pfanswer ret_5;
          if (((t_0_k_1 - t_0_i) >= 8))
          {
            pfanswer ret_6 = nt_edangler_ml(t_0_i, t_0_k_1);
            pfanswer a_4 = ret_6;
            if (is_not_empty(a_4))
              {
                ret_5 = incl(a_4);
              }

            else
              {
                empty( ret_5);
              }

            erase( a_4);
          }

          else
            {
              empty( ret_5);
            }

          pfanswer a_3 = ret_5;
          if (is_not_empty(a_3))
          {
            pfanswer ans = combine(a_3, a_5);
            push_back_sum( answers, ans);
          }

          erase( a_3);
        }

        erase( a_5);
      }

    }


  if (((t_0_j - t_0_i) >= 15))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 7); (t_0_k_2 <= (t_0_j - 8)); ++t_0_k_2)
      {
        TUSubsequence ret_11 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
        TUSubsequence a_8 = ret_11;
        if (is_not_empty(a_8))
        {
          pfanswer ret_12 = nt_no_dl_no_ss_end((t_0_k_2 + 1), t_0_j);
          pfanswer a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            pfanswer ret_9;
            if (((t_0_k_2 - t_0_i) >= 7))
            {
              pfanswer ret_10 = nt_nodangle_ml(t_0_i, t_0_k_2);
              pfanswer a_7 = ret_10;
              if (is_not_empty(a_7))
                {
                  ret_9 = incl(a_7);
                }

              else
                {
                  empty( ret_9);
                }

              erase( a_7);
            }

            else
              {
                empty( ret_9);
              }

            pfanswer a_6 = ret_9;
            if (is_not_empty(a_6))
            {
              pfanswer ans = acomb(a_6, a_8, a_9);
              push_back_sum( answers, ans);
            }

            erase( a_6);
          }

          erase( a_9);
        }

        erase( a_8);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  ml_comps2_table.set( t_0_i, t_0_j, eval);
  return ml_comps2_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_ml_comps3(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps3_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps3_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 17))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 8); (t_0_k_0 <= (t_0_j - 9)); ++t_0_k_0)
      {
        pfanswer ret_3 = nt_dl_or_ss_left_ss_end(t_0_k_0, t_0_j);
        pfanswer a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          pfanswer ret_1;
          if (((t_0_k_0 - t_0_i) >= 8))
          {
            pfanswer ret_2 = nt_edangler_ml(t_0_i, t_0_k_0);
            pfanswer a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_1 = incl(a_1);
              }

            else
              {
                empty( ret_1);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_1);
            }

          pfanswer a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            pfanswer ans = combine(a_0, a_2);
            push_back_sum( answers, ans);
          }

          erase( a_0);
        }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 15))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 8)); ++t_0_k_1)
      {
        pfanswer ret_7 = nt_no_dl_ss_end(t_0_k_1, t_0_j);
        pfanswer a_5 = ret_7;
        if (is_not_empty(a_5))
        {
          pfanswer ret_5;
          if (((t_0_k_1 - t_0_i) >= 7))
          {
            pfanswer ret_6 = nt_nodangle_ml(t_0_i, t_0_k_1);
            pfanswer a_4 = ret_6;
            if (is_not_empty(a_4))
              {
                ret_5 = incl(a_4);
              }

            else
              {
                empty( ret_5);
              }

            erase( a_4);
          }

          else
            {
              empty( ret_5);
            }

          pfanswer a_3 = ret_5;
          if (is_not_empty(a_3))
          {
            pfanswer ans = combine(a_3, a_5);
            push_back_sum( answers, ans);
          }

          erase( a_3);
        }

        erase( a_5);
      }

    }


  if (((t_0_j - t_0_i) >= 16))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 7); (t_0_k_2 <= (t_0_j - 9)); ++t_0_k_2)
      {
        TUSubsequence ret_11 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
        TUSubsequence a_8 = ret_11;
        if (is_not_empty(a_8))
        {
          pfanswer ret_12 = nt_no_dl_ss_end((t_0_k_2 + 1), t_0_j);
          pfanswer a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            pfanswer ret_9;
            if (((t_0_k_2 - t_0_i) >= 7))
            {
              pfanswer ret_10 = nt_nodangle_ml(t_0_i, t_0_k_2);
              pfanswer a_7 = ret_10;
              if (is_not_empty(a_7))
                {
                  ret_9 = incl(a_7);
                }

              else
                {
                  empty( ret_9);
                }

              erase( a_7);
            }

            else
              {
                empty( ret_9);
              }

            pfanswer a_6 = ret_9;
            if (is_not_empty(a_6))
            {
              pfanswer ans = acomb(a_6, a_8, a_9);
              push_back_sum( answers, ans);
            }

            erase( a_6);
          }

          erase( a_9);
        }

        erase( a_8);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  ml_comps3_table.set( t_0_i, t_0_j, eval);
  return ml_comps3_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_ml_comps4(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps4_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps4_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 16))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 8); (t_0_k_0 <= (t_0_j - 8)); ++t_0_k_0)
      {
        pfanswer ret_2 = nt_no_dl_ss_end(t_0_k_0, t_0_j);
        pfanswer a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          pfanswer ret_1 = nt_block_dl(t_0_i, t_0_k_0);
          pfanswer a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            pfanswer ans = combine(a_0, a_1);
            push_back_sum( answers, ans);
          }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_j - t_0_i) >= 18))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 9); (t_0_k_1 <= (t_0_j - 9)); ++t_0_k_1)
      {
        pfanswer ret_5 = nt_dl_or_ss_left_ss_end(t_0_k_1, t_0_j);
        pfanswer a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          pfanswer ret_4 = nt_block_dlr(t_0_i, t_0_k_1);
          pfanswer a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            pfanswer ans = combine(a_2, a_3);
            push_back_sum( answers, ans);
          }

          erase( a_2);
        }

        erase( a_3);
      }

    }


  if (((t_0_j - t_0_i) >= 17))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 8); (t_0_k_2 <= (t_0_j - 9)); ++t_0_k_2)
      {
        TUSubsequence ret_8 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
        TUSubsequence a_5 = ret_8;
        if (is_not_empty(a_5))
        {
          pfanswer ret_9 = nt_no_dl_ss_end((t_0_k_2 + 1), t_0_j);
          pfanswer a_6 = ret_9;
          if (is_not_empty(a_6))
          {
            pfanswer ret_7 = nt_block_dl(t_0_i, t_0_k_2);
            pfanswer a_4 = ret_7;
            if (is_not_empty(a_4))
            {
              pfanswer ans = acomb(a_4, a_5, a_6);
              push_back_sum( answers, ans);
            }

            erase( a_4);
          }

          erase( a_6);
        }

        erase( a_5);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  ml_comps4_table.set( t_0_i, t_0_j, eval);
  return ml_comps4_table.get(t_0_i, t_0_j);
}

pfanswer p_func::nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 18))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);


  if (stackpairing(t_0_seq, t_0_i, t_0_j))
  {
    pfanswer ret_1;
    if (((t_0_j - t_0_i) >= 20))
    {
      TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_5 = ret_7;
      if (is_not_empty(a_5))
      {
        TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_3 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_3;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_2;
              if (is_not_empty(a_0))
              {
                pfanswer ret_5 = nt_ml_comps1((t_0_i + 3), (t_0_j - 2));
                pfanswer a_3 = ret_5;
                if (is_not_empty(a_3))
                  {
                    ret_1 = mldl(a_0, a_1, a_2, a_3, a_4, a_5);
                  }

                else
                  {
                    empty( ret_1);
                  }

                erase( a_3);
              }

              else
                {
                  empty( ret_1);
                }

              erase( a_0);
            }

            else
              {
                empty( ret_1);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_1);
            }

          erase( a_2);
        }

        else
          {
            empty( ret_1);
          }

        erase( a_4);
      }

      else
        {
          empty( ret_1);
        }

      erase( a_5);
    }

    else
      {
        empty( ret_1);
      }

    if (is_not_empty(ret_1))
      {
        push_back_sum( answers, ret_1);
      }

    pfanswer ret_8;
    if (((t_0_j - t_0_i) >= 19))
    {
      TUSubsequence ret_14 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_11 = ret_14;
      if (is_not_empty(a_11))
      {
        TUSubsequence ret_13 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_10 = ret_13;
        if (is_not_empty(a_10))
        {
          TUSubsequence ret_11 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
          TUSubsequence a_8 = ret_11;
          if (is_not_empty(a_8))
          {
            TUSubsequence ret_10 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_7 = ret_10;
            if (is_not_empty(a_7))
            {
              TUSubsequence ret_9 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_6 = ret_9;
              if (is_not_empty(a_6))
              {
                pfanswer ret_12 = nt_ml_comps2((t_0_i + 3), (t_0_j - 2));
                pfanswer a_9 = ret_12;
                if (is_not_empty(a_9))
                  {
                    ret_8 = mladl(a_6, a_7, a_8, a_9, a_10, a_11);
                  }

                else
                  {
                    empty( ret_8);
                  }

                erase( a_9);
              }

              else
                {
                  empty( ret_8);
                }

              erase( a_6);
            }

            else
              {
                empty( ret_8);
              }

            erase( a_7);
          }

          else
            {
              empty( ret_8);
            }

          erase( a_8);
        }

        else
          {
            empty( ret_8);
          }

        erase( a_10);
      }

      else
        {
          empty( ret_8);
        }

      erase( a_11);
    }

    else
      {
        empty( ret_8);
      }

    if (is_not_empty(ret_8))
      {
        push_back_sum( answers, ret_8);
      }

    pfanswer ret_15;
    if (((t_0_j - t_0_i) >= 20))
    {
      TUSubsequence ret_21 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_17 = ret_21;
      if (is_not_empty(a_17))
      {
        TUSubsequence ret_20 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_16 = ret_20;
        if (is_not_empty(a_16))
        {
          TUSubsequence ret_19 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
          TUSubsequence a_15 = ret_19;
          if (is_not_empty(a_15))
          {
            TUSubsequence ret_17 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_13 = ret_17;
            if (is_not_empty(a_13))
            {
              TUSubsequence ret_16 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_12 = ret_16;
              if (is_not_empty(a_12))
              {
                pfanswer ret_18 = nt_ml_comps3((t_0_i + 2), (t_0_j - 3));
                pfanswer a_14 = ret_18;
                if (is_not_empty(a_14))
                  {
                    ret_15 = mldr(a_12, a_13, a_14, a_15, a_16, a_17);
                  }

                else
                  {
                    empty( ret_15);
                  }

                erase( a_14);
              }

              else
                {
                  empty( ret_15);
                }

              erase( a_12);
            }

            else
              {
                empty( ret_15);
              }

            erase( a_13);
          }

          else
            {
              empty( ret_15);
            }

          erase( a_15);
        }

        else
          {
            empty( ret_15);
          }

        erase( a_16);
      }

      else
        {
          empty( ret_15);
        }

      erase( a_17);
    }

    else
      {
        empty( ret_15);
      }

    if (is_not_empty(ret_15))
      {
        push_back_sum( answers, ret_15);
      }

    pfanswer ret_22;
    if (((t_0_j - t_0_i) >= 19))
    {
      TUSubsequence ret_28 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_23 = ret_28;
      if (is_not_empty(a_23))
      {
        TUSubsequence ret_27 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_22 = ret_27;
        if (is_not_empty(a_22))
        {
          TUSubsequence ret_26 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
          TUSubsequence a_21 = ret_26;
          if (is_not_empty(a_21))
          {
            TUSubsequence ret_24 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_19 = ret_24;
            if (is_not_empty(a_19))
            {
              TUSubsequence ret_23 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_18 = ret_23;
              if (is_not_empty(a_18))
              {
                pfanswer ret_25 = nt_ml_comps2((t_0_i + 2), (t_0_j - 3));
                pfanswer a_20 = ret_25;
                if (is_not_empty(a_20))
                  {
                    ret_22 = mladr(a_18, a_19, a_20, a_21, a_22, a_23);
                  }

                else
                  {
                    empty( ret_22);
                  }

                erase( a_20);
              }

              else
                {
                  empty( ret_22);
                }

              erase( a_18);
            }

            else
              {
                empty( ret_22);
              }

            erase( a_19);
          }

          else
            {
              empty( ret_22);
            }

          erase( a_21);
        }

        else
          {
            empty( ret_22);
          }

        erase( a_22);
      }

      else
        {
          empty( ret_22);
        }

      erase( a_23);
    }

    else
      {
        empty( ret_22);
      }

    if (is_not_empty(ret_22))
      {
        push_back_sum( answers, ret_22);
      }

    pfanswer ret_29;
    if (((t_0_j - t_0_i) >= 22))
    {
      TUSubsequence ret_36 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_30 = ret_36;
      if (is_not_empty(a_30))
      {
        TUSubsequence ret_35 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_29 = ret_35;
        if (is_not_empty(a_29))
        {
          TUSubsequence ret_34 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
          TUSubsequence a_28 = ret_34;
          if (is_not_empty(a_28))
          {
            TUSubsequence ret_32 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
            TUSubsequence a_26 = ret_32;
            if (is_not_empty(a_26))
            {
              TUSubsequence ret_31 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_25 = ret_31;
              if (is_not_empty(a_25))
              {
                TUSubsequence ret_30 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_24 = ret_30;
                if (is_not_empty(a_24))
                {
                  pfanswer ret_33 = nt_ml_comps4((t_0_i + 3), (t_0_j - 3));
                  pfanswer a_27 = ret_33;
                  if (is_not_empty(a_27))
                    {
                      ret_29 = mldlr(a_24, a_25, a_26, a_27, a_28, a_29, a_30);
                    }

                  else
                    {
                      empty( ret_29);
                    }

                  erase( a_27);
                }

                else
                  {
                    empty( ret_29);
                  }

                erase( a_24);
              }

              else
                {
                  empty( ret_29);
                }

              erase( a_25);
            }

            else
              {
                empty( ret_29);
              }

            erase( a_26);
          }

          else
            {
              empty( ret_29);
            }

          erase( a_28);
        }

        else
          {
            empty( ret_29);
          }

        erase( a_29);
      }

      else
        {
          empty( ret_29);
        }

      erase( a_30);
    }

    else
      {
        empty( ret_29);
      }

    if (is_not_empty(ret_29))
      {
        push_back_sum( answers, ret_29);
      }

    pfanswer ret_37;
    if (((t_0_j - t_0_i) >= 20))
    {
      TUSubsequence ret_44 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_37 = ret_44;
      if (is_not_empty(a_37))
      {
        TUSubsequence ret_43 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_36 = ret_43;
        if (is_not_empty(a_36))
        {
          TUSubsequence ret_42 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
          TUSubsequence a_35 = ret_42;
          if (is_not_empty(a_35))
          {
            TUSubsequence ret_40 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
            TUSubsequence a_33 = ret_40;
            if (is_not_empty(a_33))
            {
              TUSubsequence ret_39 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_32 = ret_39;
              if (is_not_empty(a_32))
              {
                TUSubsequence ret_38 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_31 = ret_38;
                if (is_not_empty(a_31))
                {
                  pfanswer ret_41 = nt_ml_comps2((t_0_i + 3), (t_0_j - 3));
                  pfanswer a_34 = ret_41;
                  if (is_not_empty(a_34))
                    {
                      ret_37 = mladlr(a_31, a_32, a_33, a_34, a_35, a_36, a_37);
                    }

                  else
                    {
                      empty( ret_37);
                    }

                  erase( a_34);
                }

                else
                  {
                    empty( ret_37);
                  }

                erase( a_31);
              }

              else
                {
                  empty( ret_37);
                }

              erase( a_32);
            }

            else
              {
                empty( ret_37);
              }

            erase( a_33);
          }

          else
            {
              empty( ret_37);
            }

          erase( a_35);
        }

        else
          {
            empty( ret_37);
          }

        erase( a_36);
      }

      else
        {
          empty( ret_37);
        }

      erase( a_37);
    }

    else
      {
        empty( ret_37);
      }

    if (is_not_empty(ret_37))
      {
        push_back_sum( answers, ret_37);
      }

    pfanswer ret_45;
    if (((t_0_j - t_0_i) >= 21))
    {
      TUSubsequence ret_52 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_44 = ret_52;
      if (is_not_empty(a_44))
      {
        TUSubsequence ret_51 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_43 = ret_51;
        if (is_not_empty(a_43))
        {
          TUSubsequence ret_50 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
          TUSubsequence a_42 = ret_50;
          if (is_not_empty(a_42))
          {
            TUSubsequence ret_48 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
            TUSubsequence a_40 = ret_48;
            if (is_not_empty(a_40))
            {
              TUSubsequence ret_47 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_39 = ret_47;
              if (is_not_empty(a_39))
              {
                TUSubsequence ret_46 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_38 = ret_46;
                if (is_not_empty(a_38))
                {
                  pfanswer ret_49 = nt_ml_comps1((t_0_i + 3), (t_0_j - 3));
                  pfanswer a_41 = ret_49;
                  if (is_not_empty(a_41))
                    {
                      ret_45 = mldladr(a_38, a_39, a_40, a_41, a_42, a_43, a_44);
                    }

                  else
                    {
                      empty( ret_45);
                    }

                  erase( a_41);
                }

                else
                  {
                    empty( ret_45);
                  }

                erase( a_38);
              }

              else
                {
                  empty( ret_45);
                }

              erase( a_39);
            }

            else
              {
                empty( ret_45);
              }

            erase( a_40);
          }

          else
            {
              empty( ret_45);
            }

          erase( a_42);
        }

        else
          {
            empty( ret_45);
          }

        erase( a_43);
      }

      else
        {
          empty( ret_45);
        }

      erase( a_44);
    }

    else
      {
        empty( ret_45);
      }

    if (is_not_empty(ret_45))
      {
        push_back_sum( answers, ret_45);
      }

    pfanswer ret_53;
    if (((t_0_j - t_0_i) >= 21))
    {
      TUSubsequence ret_60 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_51 = ret_60;
      if (is_not_empty(a_51))
      {
        TUSubsequence ret_59 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_50 = ret_59;
        if (is_not_empty(a_50))
        {
          TUSubsequence ret_58 = BASE(t_0_seq, (t_0_j - 3), (t_0_j - 2));
          TUSubsequence a_49 = ret_58;
          if (is_not_empty(a_49))
          {
            TUSubsequence ret_56 = BASE(t_0_seq, (t_0_i + 2), ((t_0_i + 2) + 1));
            TUSubsequence a_47 = ret_56;
            if (is_not_empty(a_47))
            {
              TUSubsequence ret_55 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              TUSubsequence a_46 = ret_55;
              if (is_not_empty(a_46))
              {
                TUSubsequence ret_54 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_45 = ret_54;
                if (is_not_empty(a_45))
                {
                  pfanswer ret_57 = nt_ml_comps3((t_0_i + 3), (t_0_j - 3));
                  pfanswer a_48 = ret_57;
                  if (is_not_empty(a_48))
                    {
                      ret_53 = mladldr(a_45, a_46, a_47, a_48, a_49, a_50, a_51);
                    }

                  else
                    {
                      empty( ret_53);
                    }

                  erase( a_48);
                }

                else
                  {
                    empty( ret_53);
                  }

                erase( a_45);
              }

              else
                {
                  empty( ret_53);
                }

              erase( a_46);
            }

            else
              {
                empty( ret_53);
              }

            erase( a_47);
          }

          else
            {
              empty( ret_53);
            }

          erase( a_49);
        }

        else
          {
            empty( ret_53);
          }

        erase( a_50);
      }

      else
        {
          empty( ret_53);
        }

      erase( a_51);
    }

    else
      {
        empty( ret_53);
      }

    if (is_not_empty(ret_53))
      {
        push_back_sum( answers, ret_53);
      }

    pfanswer ret_61;
    if (((t_0_j - t_0_i) >= 18))
    {
      TUSubsequence ret_66 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      TUSubsequence a_56 = ret_66;
      if (is_not_empty(a_56))
      {
        TUSubsequence ret_65 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
        TUSubsequence a_55 = ret_65;
        if (is_not_empty(a_55))
        {
          TUSubsequence ret_63 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
          TUSubsequence a_53 = ret_63;
          if (is_not_empty(a_53))
          {
            TUSubsequence ret_62 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_52 = ret_62;
            if (is_not_empty(a_52))
            {
              pfanswer ret_64 = nt_ml_comps2((t_0_i + 2), (t_0_j - 2));
              pfanswer a_54 = ret_64;
              if (is_not_empty(a_54))
                {
                  ret_61 = ml(a_52, a_53, a_54, a_55, a_56);
                }

              else
                {
                  empty( ret_61);
                }

              erase( a_54);
            }

            else
              {
                empty( ret_61);
              }

            erase( a_52);
          }

          else
            {
              empty( ret_61);
            }

          erase( a_53);
        }

        else
          {
            empty( ret_61);
          }

        erase( a_55);
      }

      else
        {
          empty( ret_61);
        }

      erase( a_56);
    }

    else
      {
        empty( ret_61);
      }

    if (is_not_empty(ret_61))
      {
        push_back_sum( answers, ret_61);
      }

  }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer &  p_func::nt_no_dl_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (no_dl_no_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return no_dl_no_ss_end_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0 = nt_ml_comps2(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_1;
  if (((t_0_j - t_0_i) >= 7))
  {
    pfanswer ret_2 = nt_nodangle_ml(t_0_i, t_0_j);
    pfanswer a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        ret_1 = incl(a_0);
      }

    else
      {
        empty( ret_1);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_sum( answers, ret_1);
    }

  pfanswer eval = h(answers);
  erase( answers);
  no_dl_no_ss_end_table.set( t_0_i, t_0_j, eval);
  return no_dl_no_ss_end_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_no_dl_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (no_dl_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return no_dl_ss_end_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0 = nt_ml_comps3(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_1;
  if (((t_0_j - t_0_i) >= 8))
  {
    pfanswer ret_2 = nt_edangler_ml(t_0_i, t_0_j);
    pfanswer a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        ret_1 = incl(a_0);
      }

    else
      {
        empty( ret_1);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_sum( answers, ret_1);
    }


  if (((t_0_j - t_0_i) >= 9))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 8); (t_0_k_0 <= (t_0_j - 1)); ++t_0_k_0)
      {
        TUSubsequence ret_6 = REGION(t_0_seq, t_0_k_0, t_0_j);
        TUSubsequence a_3 = ret_6;
        if (is_not_empty(a_3))
        {
          pfanswer ret_4;
          if (((t_0_k_0 - t_0_i) >= 8))
          {
            pfanswer ret_5 = nt_edangler_ml(t_0_i, t_0_k_0);
            pfanswer a_2 = ret_5;
            if (is_not_empty(a_2))
              {
                ret_4 = incl(a_2);
              }

            else
              {
                empty( ret_4);
              }

            erase( a_2);
          }

          else
            {
              empty( ret_4);
            }

          pfanswer a_1 = ret_4;
          if (is_not_empty(a_1))
          {
            pfanswer ans = addss(a_1, a_3);
            push_back_sum( answers, ans);
          }

          erase( a_1);
        }

        erase( a_3);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  no_dl_ss_end_table.set( t_0_i, t_0_j, eval);
  return no_dl_ss_end_table.get(t_0_i, t_0_j);
}

pfanswer &  p_func::nt_nodangle_ml(unsigned int t_0_i, unsigned int t_0_j)
{
  if (nodangle_ml_table.is_tabulated(t_0_i, t_0_j))
    {
      return nodangle_ml_table.get(t_0_i, t_0_j);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 7))
  {
    pfanswer ret_1 = nt_initstem(t_0_i, t_0_j);
    pfanswer a_0 = ret_1;
    if (is_not_empty(a_0))
      {
        ret_0 = drem(a_0);
      }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  nodangle_ml_table.set( t_0_i, t_0_j, eval);
  return nodangle_ml_table.get(t_0_i, t_0_j);
}

pfanswer p_func::nt_nodangle_struct(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 7))
  {
    pfanswer ret_1 = nt_initstem(t_0_i, t_0_j);
    pfanswer a_0 = ret_1;
    if (is_not_empty(a_0))
      {
        ret_0 = drem(a_0);
      }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer &  p_func::nt_noleft_dangle(unsigned int t_0_i)
{
  if (noleft_dangle_table.is_tabulated(t_0_i))
    {
      return noleft_dangle_table.get(t_0_i);
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 8); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        pfanswer ret_2;
        empty(ret_2);
        empty( ret_2);
        pfanswer ret_3 = nt_left_dangle(t_0_k_0);
        if (is_not_empty(ret_3))
          {
            push_back_sum( ret_2, ret_3);
          }

        pfanswer ret_4 = nt_left_unpaired(t_0_k_0);
        if (is_not_empty(ret_4))
          {
            push_back_sum( ret_2, ret_4);
          }

        finalize( ret_2);
        pfanswer a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          pfanswer ret_1 = nt_edangler_struct(t_0_i, t_0_k_0);
          pfanswer a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              pfanswer x_1 = a_1;
              pfanswer ans = cadd_Pr_Pr(a_0, x_1);
              push_back_sum( answers, ans);

            }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= t_0_right_most); ++t_0_k_1)
      {
        pfanswer ret_7;
        empty(ret_7);
        empty( ret_7);
        pfanswer ret_8 = nt_noleft_dangle(t_0_k_1);
        if (is_not_empty(ret_8))
          {
            push_back_sum( ret_7, ret_8);
          }

        pfanswer ret_9;
        if ((((t_0_right_most - t_0_k_1) >= 0) && ((t_0_right_most - t_0_k_1) <= 0)))
        {
          TUSubsequence ret_10 = LOC(t_0_seq, t_0_k_1, t_0_k_1);
          TUSubsequence a_4 = ret_10;
          if (is_not_empty(a_4))
            {
              ret_9 = nil_Pr(a_4);
            }

          else
            {
              empty( ret_9);
            }

          erase( a_4);
        }

        else
          {
            empty( ret_9);
          }

        if (is_not_empty(ret_9))
          {
            push_back_sum( ret_7, ret_9);
          }

        finalize( ret_7);
        pfanswer a_3 = ret_7;
        if (is_not_empty(a_3))
        {
          pfanswer ret_6 = nt_nodangle_struct(t_0_i, t_0_k_1);
          pfanswer a_2 = ret_6;
          if (is_not_empty(a_2))
            {
              pfanswer x_3 = a_3;
              pfanswer ans = cadd_Pr_Pr_Pr(a_2, x_3);
              push_back_sum( answers, ans);

            }

          erase( a_2);
        }

        erase( a_3);
      }

    }


  if (((t_0_right_most - t_0_i) >= 15))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 7); (t_0_k_2 <= (t_0_right_most - 8)); ++t_0_k_2)
      {
        TUSubsequence ret_13 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
        TUSubsequence a_6 = ret_13;
        if (is_not_empty(a_6))
        {
          pfanswer ret_14 = nt_noleft_dangle((t_0_k_2 + 1));
          pfanswer a_7 = ret_14;
          if (is_not_empty(a_7))
          {
            pfanswer ret_12 = nt_nodangle_struct(t_0_i, t_0_k_2);
            pfanswer a_5 = ret_12;
            if (is_not_empty(a_5))
            {
              pfanswer ans = ambd_Pr(a_5, a_6, a_7);
              push_back_sum( answers, ans);
            }

            erase( a_5);
          }

          erase( a_7);
        }

        erase( a_6);
      }

    }

  pfanswer eval = h(answers);
  erase( answers);
  noleft_dangle_table.set( t_0_i, eval);
  return noleft_dangle_table.get(t_0_i);
}

pfanswer p_func::nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (stackpairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_7;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
          TUSubsequence a_5 = ret_6;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            TUSubsequence a_1 = ret_2;
            if (is_not_empty(a_1))
            {
              TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_0 = ret_1;
              if (is_not_empty(a_0))
              {
                pfanswer ret_3;
                empty(ret_3);
                if ((((t_0_j - 2) - (t_0_i + 2)) >= 8))
                  {
                    for(                    unsigned int t_0_k_0 = ((t_0_i + 2) + 7); (t_0_k_0 <= ((t_0_j - 2) - 1)); ++t_0_k_0)
                    {
                      TUSubsequence ret_5 = REGION(t_0_seq, t_0_k_0, (t_0_j - 2));
                      TUSubsequence a_4 = ret_5;
                      if (is_not_empty(a_4))
                      {
                        pfanswer ret_4 = nt_closed((t_0_i + 2), t_0_k_0);
                        pfanswer a_3 = ret_4;
                        if (is_not_empty(a_3))
                        {
                          pfanswer ans = br(a_3, a_4);
                          push_back_sum( ret_3, ans);
                        }

                        erase( a_3);
                      }

                      erase( a_4);
                    }

                  }

                finalize( ret_3);
                pfanswer a_2 = ret_3;
                if (is_not_empty(a_2))
                  {
                    pfanswer x_2 = a_2;
                    pfanswer ans = sp(a_0, a_1, x_2, a_5, a_6);
                    push_back_sum( answers, ans);

                  }

                erase( a_2);
              }

              erase( a_0);
            }

            erase( a_1);
          }

          erase( a_5);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 9))
    {
      return pfanswer_zero;
    }

  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0;
  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepairing(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            pfanswer ret_2 = nt_closed((t_0_i + 1), (t_0_j - 1));
            pfanswer a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_0 = sr(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_0);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}

pfanswer p_func::nt_struct()
{
  pfanswer answers;
  empty(answers);
  empty( answers);
  pfanswer ret_0 = nt_left_dangle(t_0_left_most);
  if (is_not_empty(ret_0))
    {
      push_back_sum( answers, ret_0);
    }

  pfanswer ret_1;
  if (((t_0_right_most - t_0_left_most) >= 7))
  {
    pfanswer ret_2 = nt_noleft_dangle(t_0_left_most);
    pfanswer a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        ret_1 = trafo(a_0);
      }

    else
      {
        empty( ret_1);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_sum( answers, ret_1);
    }

  pfanswer ret_3 = nt_left_unpaired(t_0_left_most);
  if (is_not_empty(ret_3))
    {
      push_back_sum( answers, ret_3);
    }

  pfanswer eval = h(answers);
  erase( answers);
  return eval;
}


pfanswer p_func::acomb(const pfanswer & le, const TUSubsequence & b, const pfanswer & re)
{
#line 1970 "hishapes.gap"
  pfanswer res = le;
  res.firststem = le.firststem;
  base_t baseLeftStem = base_t(le.firststem[(b.i - 1)]);
  base_t baseRightStem = base_t(re.firststem[(b.i + 1)]);
  base_t baseAmbigious = base_t(b[b.i]);
  double wcDr = dr_dangle_dg(wc_comp(baseLeftStem), baseLeftStem, baseAmbigious);
  double wobDr = dr_dangle_dg(wob_comp(baseLeftStem), baseLeftStem, baseAmbigious);
  double wcDl = dl_dangle_dg(baseAmbigious, baseRightStem, wc_comp(baseRightStem));
  double wobDl = dl_dangle_dg(baseAmbigious, baseRightStem, wob_comp(baseRightStem));
  res.pf.q1 = ((le.pf.q1 *  ( ((re.pf.q1 * mk_pf(min(wcDr, wcDl))) + (re.pf.q3 * mk_pf(min(wcDr, wobDl)))) ) ) + (le.pf.q2 *  ( ((re.pf.q1 * mk_pf(min(wobDr, wcDl))) + (re.pf.q3 * mk_pf(min(wobDr, wobDl)))) ) ));
  res.pf.q2 = ((le.pf.q2 *  ( ((re.pf.q2 * mk_pf(min(wobDr, wcDl))) + (re.pf.q4 * mk_pf(min(wobDr, wobDl)))) ) ) + (le.pf.q1 *  ( ((re.pf.q2 * mk_pf(min(wcDr, wcDl))) + (re.pf.q4 * mk_pf(min(wcDr, wobDl)))) ) ));
  res.pf.q3 = ((le.pf.q3 *  ( ((re.pf.q3 * mk_pf(min(wcDr, wobDl))) + (re.pf.q1 * mk_pf(min(wcDr, wcDl)))) ) ) + (le.pf.q4 *  ( ((re.pf.q3 * mk_pf(min(wobDr, wobDl))) + (re.pf.q1 * mk_pf(min(wobDr, wcDl)))) ) ));
  res.pf.q4 = ((le.pf.q4 *  ( ((re.pf.q4 * mk_pf(min(wobDr, wobDl))) + (re.pf.q2 * mk_pf(min(wobDr, wcDl)))) ) ) + (le.pf.q3 *  ( ((re.pf.q4 * mk_pf(min(wcDr, wobDl))) + (re.pf.q2 * mk_pf(min(wcDr, wcDl)))) ) ));
  res.pf.q1 = (res.pf.q1 * scale(1));
  res.pf.q2 = (res.pf.q2 * scale(1));
  res.pf.q3 = (res.pf.q3 * scale(1));
  res.pf.q4 = (res.pf.q4 * scale(1));
  return res;
#line 3302 "p_func.cc"
}

pfanswer p_func::addss(const pfanswer & e, const TUSubsequence & rregion)
{
#line 1917 "hishapes.gap"
  pfanswer res = e;
  res.pf = mult_tup((scale((rregion.j - rregion.i)) * mk_pf(ss_energy(rregion))), e.pf);
  return res;
#line 3311 "p_func.cc"
}

pfanswer p_func::ambd(const pfanswer & le, const TUSubsequence & b, const pfanswer & re)
{
#line 1519 "hishapes.gap"
  pfanswer res = le;
  res.pf.q1 = (scale(1) * check_tuple(le.pf.q1, le.firststem, re.firststem, b, re.pf));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3323 "p_func.cc"
}

pfanswer p_func::ambd_Pr(const pfanswer & le, const TUSubsequence & b, const pfanswer & re)
{
#line 1530 "hishapes.gap"
  pfanswer res = le;
  res.pf = mk_tuple(le.firststem, (scale(1) * check_tuple(le.pf.q1, le.firststem, re.firststem, b, re.pf)));
  return res;
#line 3332 "p_func.cc"
}

pfanswer p_func::bl(const TUSubsequence & lregion, const pfanswer & e)
{
#line 1662 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = lregion.i;
  TUSubsequence innerstem;
  innerstem.seq = lregion.seq;
  innerstem.i = (lregion.i - 1);
  innerstem.j = (e.firststem.j + 1);
  res.pf.q1 = ((scale((lregion.j - lregion.i)) * e.pf.q1) * mk_pf(bl_energy(lregion, innerstem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3349 "p_func.cc"
}

pfanswer p_func::br(const pfanswer & e, const TUSubsequence & rregion)
{
#line 1680 "hishapes.gap"
  pfanswer res = e;
  res.firststem.j = rregion.j;
  TUSubsequence innerstem;
  innerstem.seq = rregion.seq;
  innerstem.i = (e.firststem.i - 1);
  innerstem.j = (rregion.j + 1);
  res.pf.q1 = ((scale((rregion.j - rregion.i)) * e.pf.q1) * mk_pf(br_energy(innerstem, rregion)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3366 "p_func.cc"
}

pfanswer p_func::cadd(const pfanswer & le, const pfanswer & re)
{
#line 1481 "hishapes.gap"
  pfanswer res = le;
  res.pf.q1 = (le.pf.q1 * re.pf.q1);
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3378 "p_func.cc"
}

pfanswer p_func::cadd_Pr(const pfanswer & le, const pfanswer & re)
{
#line 1492 "hishapes.gap"
  pfanswer res = le;
  res.pf.q1 = (le.pf.q1 * sum_elems(re.pf));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3390 "p_func.cc"
}

pfanswer p_func::cadd_Pr_Pr(const pfanswer & le, const pfanswer & re)
{
#line 1503 "hishapes.gap"
  pfanswer res = le;
  res.pf = mk_tuple(le.firststem, (le.pf.q1 * re.pf.q1));
  return res;
#line 3399 "p_func.cc"
}

pfanswer p_func::cadd_Pr_Pr_Pr(const pfanswer & le, const pfanswer & re)
{
#line 1511 "hishapes.gap"
  pfanswer res = le;
  res.pf = mk_tuple(le.firststem, (le.pf.q1 * sum_elems(re.pf)));
  return res;
#line 3408 "p_func.cc"
}

pfanswer p_func::combine(const pfanswer & le, const pfanswer & re)
{
#line 1957 "hishapes.gap"
  pfanswer res = le;
  res.firststem = le.firststem;
  res.pf.q1 = ( ( (le.pf.q1 + le.pf.q2) )  *  ( (re.pf.q1 + re.pf.q3) ) );
  res.pf.q2 = ( ( (le.pf.q1 + le.pf.q2) )  *  ( (re.pf.q2 + re.pf.q4) ) );
  res.pf.q3 = ( ( (le.pf.q3 + le.pf.q4) )  *  ( (re.pf.q3 + re.pf.q1) ) );
  res.pf.q4 = ( ( (le.pf.q4 + le.pf.q3) )  *  ( (re.pf.q4 + re.pf.q2) ) );
  return res;
#line 3421 "p_func.cc"
}

pfanswer p_func::drem(const pfanswer & e)
{
#line 1599 "hishapes.gap"
  return e;
#line 3428 "p_func.cc"
}

pfanswer p_func::edl(const TUSubsequence & lb, const pfanswer & e)
{
#line 1566 "hishapes.gap"
  pfanswer res = e;
  res.pf.q1 = ((scale(1) * e.pf.q1) * mk_pf(dl_energy(e.firststem, e.firststem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3440 "p_func.cc"
}

pfanswer p_func::edlr(const TUSubsequence & lb, const pfanswer & e, const TUSubsequence & rb)
{
#line 1588 "hishapes.gap"
  pfanswer res = e;
  res.pf.q1 = ((scale(2) * e.pf.q1) * mk_pf(ext_mismatch_energy(e.firststem, e.firststem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3452 "p_func.cc"
}

pfanswer p_func::edr(const pfanswer & e, const TUSubsequence & rb)
{
#line 1577 "hishapes.gap"
  pfanswer res = e;
  res.pf.q1 = ((scale(1) * e.pf.q1) * mk_pf(dr_energy(e.firststem, e.firststem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3464 "p_func.cc"
}

//## sum_usage ##
pfanswer p_func::h(pfanswer i)
{
  return i;
  return sum(i);
}

pfanswer p_func::hl(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1628 "hishapes.gap"
  pfanswer res;
  res.firststem.seq = llb.seq;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.pf.q1 = (scale(((region.j - region.i) + 4)) * mk_pf((hl_energy(region) + sr_energy(res.firststem, res.firststem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3489 "p_func.cc"
}

pfanswer p_func::il(const TUSubsequence & lregion, const pfanswer & e, const TUSubsequence & rregion)
{
#line 1698 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = lregion.i;
  res.firststem.j = rregion.j;
  res.pf.q1 = ((scale(( ( (lregion.j - lregion.i) )  +  ( (rregion.j - rregion.i) ) )) * e.pf.q1) * mk_pf(il_energy(lregion, rregion)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3503 "p_func.cc"
}

pfanswer p_func::incl(const pfanswer & e)
{
#line 1949 "hishapes.gap"
  pfanswer res = e;
  res.pf = mk_tuple(e.firststem, (e.pf.q1 * mk_pf(ul_energy())));
  return res;
#line 3512 "p_func.cc"
}

pfanswer p_func::is(const pfanswer & e)
{
#line 1603 "hishapes.gap"
  pfanswer res = e;
  res.pf.q1 = (e.pf.q1 * mk_pf(termau_energy(e.firststem, e.firststem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3524 "p_func.cc"
}

pfanswer p_func::ml(const TUSubsequence & llb, const TUSubsequence & lb, const pfanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1712 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.pf.q1 = ((scale(4) * sum_elems(e.pf)) * mk_pf((((ml_energy() + ul_energy()) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3542 "p_func.cc"
}

pfanswer p_func::mladl(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const pfanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1892 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  base_t leftdanglingBase = base_t(dl[dl.i]);
  base_t leftmostBasefirstStem = base_t(e.firststem[(dl.i + 1)]);
  double amdangle;
  amdangle = (( ( (e.pf.q1 + e.pf.q2) )  * mk_pf(min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wc_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)))) + ( ( (e.pf.q3 + e.pf.q4) )  * mk_pf(min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wob_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)))));
  res.pf.q1 = ((scale(5) * amdangle) * mk_pf((((ml_energy() + ul_energy()) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3564 "p_func.cc"
}

pfanswer p_func::mladldr(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const pfanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1848 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  base_t leftdanglingBase = base_t(dl[dl.i]);
  base_t leftmostBasefirstStem = base_t(e.firststem[(dl.i + 1)]);
  double amdangle;
  amdangle = (( ( (e.pf.q1 + e.pf.q2) )  * mk_pf(min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wc_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)))) + ( ( (e.pf.q3 + (e.pf.q4 * mk_pf(dri_energy(innerstem, innerstem)))) )  * mk_pf(min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wob_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)))));
  res.pf.q1 = ((scale(6) * amdangle) * mk_pf((((ml_energy() + ul_energy()) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3586 "p_func.cc"
}

pfanswer p_func::mladlr(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const pfanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1794 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  base_t leftdanglingBase = base_t(dl[dl.i]);
  base_t rightdanglingBase = base_t(dr[dr.i]);
  base_t leftmostBasefirstStem = base_t(e.firststem[(dl.i + 1)]);
  base_t rightmostBaselastStem = base_t(e.firststem[(dr.i - 1)]);
  double amdangle;
  amdangle = ((((e.pf.q1 * mk_pf((min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wc_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)) + min(dr_dangle_dg(wc_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem))))) + (e.pf.q2 * mk_pf((min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wc_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)) + min(dr_dangle_dg(wob_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem)))))) + (e.pf.q3 * mk_pf((min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wob_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)) + min(dr_dangle_dg(wc_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem)))))) + (e.pf.q4 * mk_pf((min(dl_dangle_dg(leftdanglingBase, leftmostBasefirstStem, wob_comp(leftmostBasefirstStem)), dli_energy(innerstem, innerstem)) + min(dr_dangle_dg(wob_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem))))));
  res.pf.q1 = ((scale(6) * amdangle) * mk_pf((((ml_energy() + ul_energy()) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3610 "p_func.cc"
}

pfanswer p_func::mladr(const TUSubsequence & llb, const TUSubsequence & lb, const pfanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1750 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  base_t rightdanglingBase = base_t(dr[dr.i]);
  base_t rightmostBaselastStem = base_t(e.firststem[(dr.i - 1)]);
  double amdangle;
  amdangle = (( ( (e.pf.q1 + e.pf.q3) )  * mk_pf(min(dr_dangle_dg(wc_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem)))) + ( ( (e.pf.q2 + e.pf.q4) )  * mk_pf(min(dr_dangle_dg(wob_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem)))));
  res.pf.q1 = ((scale(5) * amdangle) * mk_pf((((ml_energy() + ul_energy()) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3632 "p_func.cc"
}

pfanswer p_func::mldl(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const pfanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1873 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.pf.q1 = ((scale(5) * sum_elems(e.pf)) * mk_pf(((((ml_energy() + ul_energy()) + dli_energy(innerstem, innerstem)) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3650 "p_func.cc"
}

pfanswer p_func::mldladr(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const pfanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1823 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  base_t rightdanglingBase = base_t(dr[dr.i]);
  base_t rightmostBaselastStem = base_t(e.firststem[(dr.i - 1)]);
  double amdangle;
  amdangle = (( ( ((e.pf.q1 * mk_pf(dli_energy(innerstem, innerstem))) + e.pf.q3) )  * mk_pf(min(dr_dangle_dg(wc_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem)))) + ( ( (e.pf.q2 + e.pf.q4) )  * mk_pf(min(dr_dangle_dg(wob_comp(rightmostBaselastStem), rightmostBaselastStem, rightdanglingBase), dri_energy(innerstem, innerstem)))));
  res.pf.q1 = ((scale(6) * amdangle) * mk_pf((((ml_energy() + ul_energy()) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3672 "p_func.cc"
}

pfanswer p_func::mldlr(const TUSubsequence & llb, const TUSubsequence & lb, const TUSubsequence & dl, const pfanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1775 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.pf.q1 = ((scale(6) * sum_elems(e.pf)) * mk_pf(((((ml_energy() + ul_energy()) + ml_mismatch_energy(innerstem, innerstem)) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3690 "p_func.cc"
}

pfanswer p_func::mldr(const TUSubsequence & llb, const TUSubsequence & lb, const pfanswer & e, const TUSubsequence & dr, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1731 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  TUSubsequence innerstem;
  innerstem.seq = lb.seq;
  innerstem.i = lb.i;
  innerstem.j = rb.j;
  res.pf.q1 = ((scale(5) * sum_elems(e.pf)) * mk_pf(((((ml_energy() + ul_energy()) + dri_energy(innerstem, innerstem)) + sr_energy(res.firststem, res.firststem)) + termau_energy(innerstem, innerstem))));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3708 "p_func.cc"
}

pfanswer p_func::nil(const TUSubsequence & loc)
{
#line 1538 "hishapes.gap"
  pfanswer res;
  res.pf.q1 = 1.000000e+00;
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  res.firststem.i = seq_size(loc);
  res.firststem.j = seq_size(loc);
  res.firststem.seq = loc.seq;
  return res;
#line 3723 "p_func.cc"
}

pfanswer p_func::nil_Pr(const TUSubsequence & loc)
{
#line 1552 "hishapes.gap"
  pfanswer res;
  res.pf.q1 = 1.000000e+00;
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  res.firststem.i = seq_size(loc);
  res.firststem.j = seq_size(loc);
  res.firststem.seq = loc.seq;
  return res;
#line 3738 "p_func.cc"
}

pfanswer p_func::sadd(const TUSubsequence & lb, const pfanswer & e)
{
#line 1470 "hishapes.gap"
  pfanswer res = e;
  res.pf.q1 = (scale(1) * e.pf.q1);
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3750 "p_func.cc"
}

pfanswer p_func::sp(const TUSubsequence & llb, const TUSubsequence & lb, const pfanswer & e, const TUSubsequence & rb, const TUSubsequence & rrb)
{
#line 1648 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = llb.i;
  res.firststem.j = rrb.j;
  res.pf.q1 = ((scale(4) * e.pf.q1) * mk_pf(sr_energy(res.firststem, res.firststem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3764 "p_func.cc"
}

pfanswer p_func::sr(const TUSubsequence & lb, const pfanswer & e, const TUSubsequence & rb)
{
#line 1614 "hishapes.gap"
  pfanswer res = e;
  res.firststem.i = lb.i;
  res.firststem.j = rb.j;
  res.pf.q1 = ((scale(2) * e.pf.q1) * mk_pf(sr_energy(res.firststem, res.firststem)));
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3778 "p_func.cc"
}

pfanswer p_func::ssadd(const TUSubsequence & lregion, const pfanswer & e)
{
#line 1925 "hishapes.gap"
  pfanswer res = e;
  TUSubsequence test;
  test.seq = lregion.seq;
  test.i = lregion.i;
  test.j = (lregion.j + 1);
  res.pf = mk_tuple(e.firststem, ((scale((lregion.j - lregion.i)) * e.pf.q1) * mk_pf((ul_energy() + ss_energy(lregion)))));
  return res;
#line 3791 "p_func.cc"
}

pfanswer p_func::trafo(const pfanswer & e)
{
#line 1938 "hishapes.gap"
  pfanswer res = e;
  res.pf.q1 = sum_elems(e.pf);
  res.pf.q2 = 0.000000e+00;
  res.pf.q3 = 0.000000e+00;
  res.pf.q4 = 0.000000e+00;
  return res;
#line 3803 "p_func.cc"
}


    void p_func::cyk()
{

}



#ident "$Id: Compiled with gapc bellmansgapc-2012.05.07 $"

